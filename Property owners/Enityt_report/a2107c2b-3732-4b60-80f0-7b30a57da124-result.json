{"name": "test_search_in_python_org_login", "status": "broken", "statusDetails": {"message": "Exception", "trace": "self = <send_invite.Test_login testMethod=test_search_in_python_org_login>\ngdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"aa491a16e756cd2a9016d0ee7699e928\")>\n\n    def test_search_in_python_org_login(self , gdriver):\n        print(\"Now i am in login\")\n        driver = gdriver\n        driver.maximize_window()\n        url = variables.url\n    \n        action = ActionChains (driver)\n        def clearTextField():\n            action.key_down(Keys.COMMAND).perform()\n            action.send_keys('a').perform()\n            action.key_up(Keys.COMMAND).perform()\n            action.send_keys(Keys.BACK_SPACE).perform()\n    \n    \n        self.driver.get(url)\n        print('SUCCESS: \"'+url+'\" saved in webdriver')\n        wait = WebDriverWait(self.driver, 80)\n    \n    \n        try:\n            submityourproperty=wait.until(EC.element_to_be_clickable((By.XPATH,\"//button[. = ' Allow selection ']\")))\n            submityourproperty.click()\n            print('SUCCESS: Submit your property button clicked')\n        except:\n            print(\"FAILED: Submit your property button could not be clicked\")\n            raise Exception\n    \n        driver.execute_script(\"window.scrollBy(0,248)\")\n    \n        # 4. Scroll window by ('0','3498')\n        driver.execute_script(\"window.scrollBy(0,3498)\")\n    \n        # 5. Scroll window by ('0','-196')\n        driver.execute_script(\"window.scrollBy(0,-196)\")\n    \n        # 6. Scroll window by ('0','-117')\n        driver.execute_script(\"window.scrollBy(0,-117)\")\n    \n    \n    \n        # try:\n        #     start=wait.until(EC.element_to_be_clickable((By.XPATH ,'//button[@data-qa=\"start-button\"]')))\n        #     start.click()\n        #     print('SUCCESS: Start button clicked')\n        # except:\n        #     print(\"FAILED: Start button could not be clicked\")\n        #     raise Exception\n    \n    \n    \n    \n        # try:\n        #     officetype=wait.until(EC.element_to_be_clickable((By.XPATH ,'//div[@data-qa-index=\"3\"]')))\n        #     officetype.click()\n        #     print('SUCCESS: Office type property clicked')\n        # except:\n        #     print(\"FAILED: Office type property button could not be clicked\")\n        #     raise Exception\n    \n    \n        # try:\n        #     stabilized=wait.until(EC.element_to_be_clickable((By.XPATH ,\"//div[@class='TextWrapper-sc-__sc-1f8vz90-0 bFxsfa'][text()='Stabilized Income']\")))\n        #     stabilized.click()\n        #     print('SUCCESS: Stabilized income type clicked')\n        # except:\n        #     print(\"FAILED: stabilized income type could not be clicked\")\n        #     raise Exception\n    \n    \n        # try:\n        #     address=wait.until(EC.element_to_be_clickable((By.XPATH ,'//input[@type=\"text\"][@autocomplete=\"name\"]')))\n        #     address.click()\n        #     address.send_keys(\"california\")\n        #     print('SUCCESS: Address Entered Successfully')\n        # except:\n        #     print(\"FAILED: Address could not be Entered\")\n        #     raise Exception\n    \n    \n    \n    \n        # 3. Scroll window by ('0','248')\n        # driver.execute_script(\"window.scrollBy(0,248)\")\n    \n        # # 4. Scroll window by ('0','3498')\n        # driver.execute_script(\"window.scrollBy(0,3498)\")\n    \n        # # 5. Scroll window by ('0','-196')\n        # driver.execute_script(\"window.scrollBy(0,-196)\")\n    \n        # # 6. Scroll window by ('0','-117')\n        # driver.execute_script(\"window.scrollBy(0,-117)\")\n    \n        # 7. Click 'submit-form'\n        try:\n            submityourproperty=wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[name='submit-form']\")))\n            submityourproperty.click()\n            print('SUCCESS: Submit Your property button clicked')\n        except:\n            print(\"FAILED: Submit your property button could not be clicked\")\n            raise Exception\n        # submit_form = driver.find_element(By.CSS_SELECTOR,\n        #                                 \"[name='submit-form']\")\n        # submit_form.click()\n    \n        # 8. Click 'Start'\n        # Step switches frame driver context.\n    \n    \n        try:\n            time.sleep(10)\n            submityourproperty=wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,'//iframe[@data-qa=\"iframe\"]')))\n            start = wait.until(EC.visibility_of_element_located((By.XPATH,\"//button[. = 'Start']\")))\n            start.click()\n            print('SUCCESS: Start button clicked successfully')\n        except:\n            print(\"FAILED: Start button could not be clicked\")\n            raise Exception\n        # driver.switch_to.default_content()\n        # driver.switch_to.frame(\n        #     driver.find_element(By.XPATH,\n        #                         \"/html/body/div[3]/div/div[2]/iframe\"))\n        # start = driver.find_element(By.XPATH,\n        #                             \"//button[. = 'Start']\")\n        # start.click()\n    \n        # 9. Click 'Office'\n        # Step switches frame driver context.\n        try:\n            #driver.switch_to.default_content()\n            #officeproperty=wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,\"/html/body/div[3]/div/div[2]/iframe\")))\n            office = wait.until(EC.visibility_of_element_located((By.XPATH,\n                                    \"//div[2]/div[. = 'Office']\")))\n            # driver.find_element(By.XPATH,\n            #                         \"//div[2]/div[. = 'Office']\")\n            office.click()\n            print('SUCCESS: Office type button clicked successfully')\n        except:\n            print(\"FAILED: Office button could not be clicked\")\n            raise Exception\n    \n    \n    \n        try:\n    \n            #driver.switch_to.default_content()\n            #officeproperty=wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,\"/html/body/div[3]/div/div[2]/iframe\")))\n            office = wait.until(EC.visibility_of_element_located((By.XPATH,\n                                    \"//div[text() = 'Stabilized Income']\")))\n            #driver.find_element(By.XPATH,\n             #                       \"//div[2]/div[. = 'Stabilized Income']\")\n            office.click()\n            print('SUCCESS: Stabilized Income button clicked successfully')\n        except:\n            print(\"FAILED: Stabilized Income button could not be clicked\")\n            raise Exception\n    \n    \n    \n        try:\n    \n            #driver.switch_to.default_content()\n            #officeproperty=wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,\"/html/body/div[3]/div/div[2]/iframe\")))\n            name = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR,\n                                \"[name='name']\")))\n            # driver.find_element(By.CSS_SELECTOR,\n            #                     \"[name='name']\")\n            name.click()\n            name.send_keys(\"california\")\n    \n            print('SUCCESS: Address entered successfully')\n        except:\n            print(\"FAILED: Address could not be entered\")\n            raise Exception\n    \n        try:\n            #driver.switch_to.default_content()\n            #officeproperty=wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,\"/html/body/div[3]/div/div[2]/iframe\")))\n            okbutton=wait.until(EC.presence_of_element_located((By.XPATH,\"//div[2]/section//button[. = 'OK']\")))\n            okbutton.click()\n            print('SUCCESS: OK button clicked successfully')\n        except:\n            print(\"FAILED: OK button could not be clicked\")\n            raise Exception\n    \n        # 13. Click 'OK'\n        # Step switches frame driver context.\n        # driver.switch_to.default_content()\n        # driver.switch_to.frame(\n        #     driver.find_element(By.XPATH,\n        #                         \"/html/body/div[3]/div/div[2]/iframe\"))\n        # ok = driver.find_element(By.XPATH,\n        #                         \"//div[2]/section//button[. = 'OK']\")\n        # ok.click()\n    \n        # 14. Click 'name'\n        # Step switches frame driver context.\n    \n        try:\n            #driver.switch_to.default_content()\n            #officeproperty=wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,\"/html/body/div[3]/div/div[2]/iframe\")))\n            name = wait.until(EC.visibility_of_element_located((By.XPATH,'//input[@ inputmode=\"numeric\"]')))\n            #driver.find_element(By.XPATH , '//input[@ inputmode=\"numeric\"]')\n    \n>           name.click()\n\nsend_invite.py:257: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"aa491a16e756cd2a9016d0ee7699e928\", element=\"268e21b8-1f89-405a-924b-c0de38668698\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"aa491a16e756cd2a9016d0ee7699e928\", element=\"268e21b8-1f89-405a-924b-c0de38668698\")>\ncommand = 'clickElement'\nparams = {'id': '268e21b8-1f89-405a-924b-c0de38668698', 'sessionId': 'aa491a16e756cd2a9016d0ee7699e928'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:396: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"aa491a16e756cd2a9016d0ee7699e928\")>\ndriver_command = 'clickElement', params = {'id': '268e21b8-1f89-405a-924b-c0de38668698'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10f922ce0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...fff72470109 _pthread_start + 148\\\\n24  libsystem_pthread.dylib             0x00007fff7246bb8b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input id=\"number-zipCode-9PzhCpKaIXabPKyY\" type=\"text\" autocomplete=\"off\" placeholder=\"Type your answer here...\" maxlength=\"15\" name=\"off\" pattern=\"[0-9]*\" inputmode=\"numeric\" tabindex=\"0\" class=\"InputField-sc-__sc-26uh88-0 gddNmG\" value=\"\"> is not clickable at point (600, 382). Other element would receive the click: <div class=\"Root-sc-__sc-1esu8nk-2 dYVBuy\">...</div>\nE         (Session info: chrome=103.0.5060.114)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001062f4ef9 chromedriver + 4480761\nE       1   chromedriver                        0x00000001062805d3 chromedriver + 4003283\nE       2   chromedriver                        0x0000000105f13338 chromedriver + 410424\nE       3   chromedriver                        0x0000000105f50cc2 chromedriver + 662722\nE       4   chromedriver                        0x0000000105f4e883 chromedriver + 653443\nE       5   chromedriver                        0x0000000105f4bed4 chromedriver + 642772\nE       6   chromedriver                        0x0000000105f4ac92 chromedriver + 638098\nE       7   chromedriver                        0x0000000105f3e939 chromedriver + 588089\nE       8   chromedriver                        0x0000000105f66a62 chromedriver + 752226\nE       9   chromedriver                        0x0000000105f3e1f5 chromedriver + 586229\nE       10  chromedriver                        0x0000000105f66b6e chromedriver + 752494\nE       11  chromedriver                        0x0000000105f794f1 chromedriver + 828657\nE       12  chromedriver                        0x0000000105f66953 chromedriver + 751955\nE       13  chromedriver                        0x0000000105f3ccd5 chromedriver + 580821\nE       14  chromedriver                        0x0000000105f3dd25 chromedriver + 584997\nE       15  chromedriver                        0x00000001062c602d chromedriver + 4288557\nE       16  chromedriver                        0x00000001062cb1b3 chromedriver + 4309427\nE       17  chromedriver                        0x00000001062d023f chromedriver + 4330047\nE       18  chromedriver                        0x00000001062cbdfa chromedriver + 4312570\nE       19  chromedriver                        0x00000001062a4fef chromedriver + 4153327\nE       20  chromedriver                        0x00000001062e5d78 chromedriver + 4418936\nE       21  chromedriver                        0x00000001062e5eff chromedriver + 4419327\nE       22  chromedriver                        0x00000001062fcab5 chromedriver + 4512437\nE       23  libsystem_pthread.dylib             0x00007fff72470109 _pthread_start + 148\nE       24  libsystem_pthread.dylib             0x00007fff7246bb8b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <send_invite.Test_login testMethod=test_search_in_python_org_login>\ngdriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"aa491a16e756cd2a9016d0ee7699e928\")>\n\n    def test_search_in_python_org_login(self , gdriver):\n        print(\"Now i am in login\")\n        driver = gdriver\n        driver.maximize_window()\n        url = variables.url\n    \n        action = ActionChains (driver)\n        def clearTextField():\n            action.key_down(Keys.COMMAND).perform()\n            action.send_keys('a').perform()\n            action.key_up(Keys.COMMAND).perform()\n            action.send_keys(Keys.BACK_SPACE).perform()\n    \n    \n        self.driver.get(url)\n        print('SUCCESS: \"'+url+'\" saved in webdriver')\n        wait = WebDriverWait(self.driver, 80)\n    \n    \n        try:\n            submityourproperty=wait.until(EC.element_to_be_clickable((By.XPATH,\"//button[. = ' Allow selection ']\")))\n            submityourproperty.click()\n            print('SUCCESS: Submit your property button clicked')\n        except:\n            print(\"FAILED: Submit your property button could not be clicked\")\n            raise Exception\n    \n        driver.execute_script(\"window.scrollBy(0,248)\")\n    \n        # 4. Scroll window by ('0','3498')\n        driver.execute_script(\"window.scrollBy(0,3498)\")\n    \n        # 5. Scroll window by ('0','-196')\n        driver.execute_script(\"window.scrollBy(0,-196)\")\n    \n        # 6. Scroll window by ('0','-117')\n        driver.execute_script(\"window.scrollBy(0,-117)\")\n    \n    \n    \n        # try:\n        #     start=wait.until(EC.element_to_be_clickable((By.XPATH ,'//button[@data-qa=\"start-button\"]')))\n        #     start.click()\n        #     print('SUCCESS: Start button clicked')\n        # except:\n        #     print(\"FAILED: Start button could not be clicked\")\n        #     raise Exception\n    \n    \n    \n    \n        # try:\n        #     officetype=wait.until(EC.element_to_be_clickable((By.XPATH ,'//div[@data-qa-index=\"3\"]')))\n        #     officetype.click()\n        #     print('SUCCESS: Office type property clicked')\n        # except:\n        #     print(\"FAILED: Office type property button could not be clicked\")\n        #     raise Exception\n    \n    \n        # try:\n        #     stabilized=wait.until(EC.element_to_be_clickable((By.XPATH ,\"//div[@class='TextWrapper-sc-__sc-1f8vz90-0 bFxsfa'][text()='Stabilized Income']\")))\n        #     stabilized.click()\n        #     print('SUCCESS: Stabilized income type clicked')\n        # except:\n        #     print(\"FAILED: stabilized income type could not be clicked\")\n        #     raise Exception\n    \n    \n        # try:\n        #     address=wait.until(EC.element_to_be_clickable((By.XPATH ,'//input[@type=\"text\"][@autocomplete=\"name\"]')))\n        #     address.click()\n        #     address.send_keys(\"california\")\n        #     print('SUCCESS: Address Entered Successfully')\n        # except:\n        #     print(\"FAILED: Address could not be Entered\")\n        #     raise Exception\n    \n    \n    \n    \n        # 3. Scroll window by ('0','248')\n        # driver.execute_script(\"window.scrollBy(0,248)\")\n    \n        # # 4. Scroll window by ('0','3498')\n        # driver.execute_script(\"window.scrollBy(0,3498)\")\n    \n        # # 5. Scroll window by ('0','-196')\n        # driver.execute_script(\"window.scrollBy(0,-196)\")\n    \n        # # 6. Scroll window by ('0','-117')\n        # driver.execute_script(\"window.scrollBy(0,-117)\")\n    \n        # 7. Click 'submit-form'\n        try:\n            submityourproperty=wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"[name='submit-form']\")))\n            submityourproperty.click()\n            print('SUCCESS: Submit Your property button clicked')\n        except:\n            print(\"FAILED: Submit your property button could not be clicked\")\n            raise Exception\n        # submit_form = driver.find_element(By.CSS_SELECTOR,\n        #                                 \"[name='submit-form']\")\n        # submit_form.click()\n    \n        # 8. Click 'Start'\n        # Step switches frame driver context.\n    \n    \n        try:\n            time.sleep(10)\n            submityourproperty=wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,'//iframe[@data-qa=\"iframe\"]')))\n            start = wait.until(EC.visibility_of_element_located((By.XPATH,\"//button[. = 'Start']\")))\n            start.click()\n            print('SUCCESS: Start button clicked successfully')\n        except:\n            print(\"FAILED: Start button could not be clicked\")\n            raise Exception\n        # driver.switch_to.default_content()\n        # driver.switch_to.frame(\n        #     driver.find_element(By.XPATH,\n        #                         \"/html/body/div[3]/div/div[2]/iframe\"))\n        # start = driver.find_element(By.XPATH,\n        #                             \"//button[. = 'Start']\")\n        # start.click()\n    \n        # 9. Click 'Office'\n        # Step switches frame driver context.\n        try:\n            #driver.switch_to.default_content()\n            #officeproperty=wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,\"/html/body/div[3]/div/div[2]/iframe\")))\n            office = wait.until(EC.visibility_of_element_located((By.XPATH,\n                                    \"//div[2]/div[. = 'Office']\")))\n            # driver.find_element(By.XPATH,\n            #                         \"//div[2]/div[. = 'Office']\")\n            office.click()\n            print('SUCCESS: Office type button clicked successfully')\n        except:\n            print(\"FAILED: Office button could not be clicked\")\n            raise Exception\n    \n    \n    \n        try:\n    \n            #driver.switch_to.default_content()\n            #officeproperty=wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,\"/html/body/div[3]/div/div[2]/iframe\")))\n            office = wait.until(EC.visibility_of_element_located((By.XPATH,\n                                    \"//div[text() = 'Stabilized Income']\")))\n            #driver.find_element(By.XPATH,\n             #                       \"//div[2]/div[. = 'Stabilized Income']\")\n            office.click()\n            print('SUCCESS: Stabilized Income button clicked successfully')\n        except:\n            print(\"FAILED: Stabilized Income button could not be clicked\")\n            raise Exception\n    \n    \n    \n        try:\n    \n            #driver.switch_to.default_content()\n            #officeproperty=wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,\"/html/body/div[3]/div/div[2]/iframe\")))\n            name = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR,\n                                \"[name='name']\")))\n            # driver.find_element(By.CSS_SELECTOR,\n            #                     \"[name='name']\")\n            name.click()\n            name.send_keys(\"california\")\n    \n            print('SUCCESS: Address entered successfully')\n        except:\n            print(\"FAILED: Address could not be entered\")\n            raise Exception\n    \n        try:\n            #driver.switch_to.default_content()\n            #officeproperty=wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,\"/html/body/div[3]/div/div[2]/iframe\")))\n            okbutton=wait.until(EC.presence_of_element_located((By.XPATH,\"//div[2]/section//button[. = 'OK']\")))\n            okbutton.click()\n            print('SUCCESS: OK button clicked successfully')\n        except:\n            print(\"FAILED: OK button could not be clicked\")\n            raise Exception\n    \n        # 13. Click 'OK'\n        # Step switches frame driver context.\n        # driver.switch_to.default_content()\n        # driver.switch_to.frame(\n        #     driver.find_element(By.XPATH,\n        #                         \"/html/body/div[3]/div/div[2]/iframe\"))\n        # ok = driver.find_element(By.XPATH,\n        #                         \"//div[2]/section//button[. = 'OK']\")\n        # ok.click()\n    \n        # 14. Click 'name'\n        # Step switches frame driver context.\n    \n        try:\n            #driver.switch_to.default_content()\n            #officeproperty=wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,\"/html/body/div[3]/div/div[2]/iframe\")))\n            name = wait.until(EC.visibility_of_element_located((By.XPATH,'//input[@ inputmode=\"numeric\"]')))\n            #driver.find_element(By.XPATH , '//input[@ inputmode=\"numeric\"]')\n    \n            name.click()\n            name.send_keys(\"22000\")\n    \n            print('SUCCESS: Zip Code entered successfully')\n        except:\n            print(\"FAILED: Zip code could not be entered\")\n>           raise Exception\nE           Exception\n\nsend_invite.py:263: Exception"}, "attachments": [{"name": "stdout", "source": "88307acc-86ec-4b5c-91a2-777c1382406c-attachment.txt", "type": "text/plain"}], "start": 1658404620599, "stop": 1658404678667, "uuid": "cdeef4c7-07ef-4609-b5e3-fd635a88ff0a", "historyId": "3af6af5c635e8282eb716e00f7f0c027", "testCaseId": "4678f030f788d1160892d91f256ecea8", "fullName": "send_invite.Test_login#test_search_in_python_org_login", "labels": [{"name": "suite", "value": "send_invite"}, {"name": "subSuite", "value": "Test_login"}, {"name": "host", "value": "Asads-MacBook-Pro.local"}, {"name": "thread", "value": "44911-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "send_invite"}]}