{"name": "test_org_signup", "status": "broken", "statusDetails": {"message": "Exception", "trace": "self = <register_complain.Test_signup testMethod=test_org_signup>\n\n        def test_org_signup(self):\n            print(\"Now i am in login\")\n            driver = self.driver\n            driver.maximize_window()\n            url = variables.ownersurl\n    \n            action = ActionChains (driver)\n            def clearTextField():\n                action.key_down(Keys.COMMAND).perform()\n                action.send_keys('a').perform()\n                action.key_up(Keys.COMMAND).perform()\n                action.send_keys(Keys.BACK_SPACE).perform()\n    \n    \n            self.driver.get(url)\n            print('SUCCESS: \"'+url+'\" saved in webdriver')\n            wait = WebDriverWait(self.driver, 150)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n            try:\n                loginemail=wait.until(EC.element_to_be_clickable((By.XPATH,\"//input[@name='email']\")))\n                loginemail.click()\n                clearTextField()\n                loginemail.send_keys(variables.login_email)\n                print('SUCCESS: Email entered in email field')\n            except:\n                print(\"FAILED: Email could not be entered\")\n                raise Exception\n    \n            try:\n                verifybutton=wait.until(EC.element_to_be_clickable((By.XPATH,\"//button[text()='Verify']\")))\n                verifybutton.click()\n                print('SUCCESS: Verify button clicked successfully')\n            except:\n                print(\"FAILED: Verify button could not be clicked\")\n                raise Exception\n    \n    #magic-iframe\n    \n            try:\n                checkemailmodale=wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,'//iframe')))\n                print('SUCCESS: iframe found and switched to it')\n            except:\n                print(\"FAILED: iframe could not be found\")\n                raise Exception\n    \n    \n            try:\n                checkemailmodale=wait.until(EC.visibility_of_element_located((By.XPATH,\"//div[@class='mg_fj mg_fl _n']\")))\n                print('SUCCESS: email sended modal appeared')\n            except:\n                print(\"FAILED: email sended modal could not be appeared\")\n                raise Exception\n            variables.emailhandler = variables.login_email\n    \n    \n    \n            ym = yopmail(driver)\n            ym.run()\n    \n    \n    \n            try:\n                LoginToasterMessage = wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'Toastify__toast-body')))\n                print('SUCCESS: Log in successfully toaster appeared')\n            except:\n                print(\"FAILED: Toaster could not appeared\")\n                raise Exception\n            time.sleep(5)\n    \n            try:\n                print('\\nToaster Appeared having text: \"'+LoginToasterMessage.text)\n            except:\n                print('\\nFAILED: Success toaster could not be appeared. Instead toaster with the text: \"'+LoginToasterMessage.text)\n                raise Exception\n    \n            try:\n>               complain=wait.until(EC.element_to_be_clickable((By.XPATH,'//a[@href=\"/dashboard/register-complain\"]')))\n\nregister_complain.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4730f4dfeb04b74f69e80484d0868a49\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x10bbf5990>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       0   chromedriver                        0x0000000101631ef9 chromedriver + 4480761\nE       1   chromedriver                        0x00000001015bd5d3 chromedriver + 4003283\nE       2   chromedriver                        0x0000000101250338 chromedriver + 410424\nE       3   chromedriver                        0x00000001012865bd chromedriver + 632253\nE       4   chromedriver                        0x0000000101286841 chromedriver + 632897\nE       5   chromedriver                        0x00000001012b87d4 chromedriver + 837588\nE       6   chromedriver                        0x00000001012a3a8d chromedriver + 752269\nE       7   chromedriver                        0x00000001012b64f1 chromedriver + 828657\nE       8   chromedriver                        0x00000001012a3953 chromedriver + 751955\nE       9   chromedriver                        0x0000000101279cd5 chromedriver + 580821\nE       10  chromedriver                        0x000000010127ad25 chromedriver + 584997\nE       11  chromedriver                        0x000000010160302d chromedriver + 4288557\nE       12  chromedriver                        0x00000001016081b3 chromedriver + 4309427\nE       13  chromedriver                        0x000000010160d23f chromedriver + 4330047\nE       14  chromedriver                        0x0000000101608dfa chromedriver + 4312570\nE       15  chromedriver                        0x00000001015e1fef chromedriver + 4153327\nE       16  chromedriver                        0x0000000101622d78 chromedriver + 4418936\nE       17  chromedriver                        0x0000000101622eff chromedriver + 4419327\nE       18  chromedriver                        0x0000000101639ab5 chromedriver + 4512437\nE       19  libsystem_pthread.dylib             0x00007fff72470109 _pthread_start + 148\nE       20  libsystem_pthread.dylib             0x00007fff7246bb8b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:90: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <register_complain.Test_signup testMethod=test_org_signup>\n\n        def test_org_signup(self):\n            print(\"Now i am in login\")\n            driver = self.driver\n            driver.maximize_window()\n            url = variables.ownersurl\n    \n            action = ActionChains (driver)\n            def clearTextField():\n                action.key_down(Keys.COMMAND).perform()\n                action.send_keys('a').perform()\n                action.key_up(Keys.COMMAND).perform()\n                action.send_keys(Keys.BACK_SPACE).perform()\n    \n    \n            self.driver.get(url)\n            print('SUCCESS: \"'+url+'\" saved in webdriver')\n            wait = WebDriverWait(self.driver, 150)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n            try:\n                loginemail=wait.until(EC.element_to_be_clickable((By.XPATH,\"//input[@name='email']\")))\n                loginemail.click()\n                clearTextField()\n                loginemail.send_keys(variables.login_email)\n                print('SUCCESS: Email entered in email field')\n            except:\n                print(\"FAILED: Email could not be entered\")\n                raise Exception\n    \n            try:\n                verifybutton=wait.until(EC.element_to_be_clickable((By.XPATH,\"//button[text()='Verify']\")))\n                verifybutton.click()\n                print('SUCCESS: Verify button clicked successfully')\n            except:\n                print(\"FAILED: Verify button could not be clicked\")\n                raise Exception\n    \n    #magic-iframe\n    \n            try:\n                checkemailmodale=wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH,'//iframe')))\n                print('SUCCESS: iframe found and switched to it')\n            except:\n                print(\"FAILED: iframe could not be found\")\n                raise Exception\n    \n    \n            try:\n                checkemailmodale=wait.until(EC.visibility_of_element_located((By.XPATH,\"//div[@class='mg_fj mg_fl _n']\")))\n                print('SUCCESS: email sended modal appeared')\n            except:\n                print(\"FAILED: email sended modal could not be appeared\")\n                raise Exception\n            variables.emailhandler = variables.login_email\n    \n    \n    \n            ym = yopmail(driver)\n            ym.run()\n    \n    \n    \n            try:\n                LoginToasterMessage = wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'Toastify__toast-body')))\n                print('SUCCESS: Log in successfully toaster appeared')\n            except:\n                print(\"FAILED: Toaster could not appeared\")\n                raise Exception\n            time.sleep(5)\n    \n            try:\n                print('\\nToaster Appeared having text: \"'+LoginToasterMessage.text)\n            except:\n                print('\\nFAILED: Success toaster could not be appeared. Instead toaster with the text: \"'+LoginToasterMessage.text)\n                raise Exception\n    \n            try:\n                complain=wait.until(EC.element_to_be_clickable((By.XPATH,'//a[@href=\"/dashboard/register-complain\"]')))\n                complain.click()\n                print('SUCCESS: Register Complain button clicked successfully')\n            except:\n                print(\"FAILED: Register Complain button could not be clicked successfully\")\n>               raise Exception\nE               Exception\n\nregister_complain.py:143: Exception"}, "attachments": [{"name": "screenshot", "source": "665fb8f6-0c0a-4f98-9734-c097d21a63ab-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "ad25434b-7e07-4a22-816c-be6a3512c6cf-attachment.txt", "type": "text/plain"}], "start": 1658838013008, "stop": 1658838322637, "uuid": "370be1d3-3d65-49ff-b7c3-1b4fef97e9fd", "historyId": "9bce6e0c879e01ac3e19c4127a5b179a", "testCaseId": "2a67868bf409d117328370a94d03fc59", "fullName": "register_complain.Test_signup#test_org_signup", "labels": [{"name": "suite", "value": "register_complain"}, {"name": "subSuite", "value": "Test_signup"}, {"name": "host", "value": "Asads-MacBook-Pro.local"}, {"name": "thread", "value": "99775-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "register_complain"}]}