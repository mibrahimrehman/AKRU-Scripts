{"name": "test_search_in_python_org", "status": "broken", "statusDetails": {"message": "Exception", "trace": "self = <yopmail_login.yopmail object at 0x111196f50>\n\n    def run(self):\n        driver = self.driver\n        wait = WebDriverWait(self.driver, 120)\n    \n        driver.execute_script(\"window.open('http://www.yopmail.com', 'new window')\")\n        driver.switch_to.window(self.driver.window_handles[1])\n    \n    \n    \n        # try:\n        #     email_text = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,  \"#login\")))\n        #     email_text.click()\n        #     print('SUCCESS:Email Text feild clicked')\n        # except:\n        #     print(\"FAILED:Email Text feild could not be clicked\")\n        #     raise Exception\n    \n    \n        try:\n            login = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,\"#login\")))\n            login.click()\n    \n            login.clear()\n    \n            login.send_keys(variables.login_email)\n            login.send_keys(Keys.ENTER)\n            print('SUCCESS: Email entered successfully')\n    \n        except:\n            print(\"FAILED:Email could not be entered\")\n            raise Exception\n    \n        time.sleep(3)\n        driver.refresh()\n        time.sleep(5)\n    \n        try:\n                driver.switch_to.frame('ifmail')\n                print('SUCCESS: Switched to YOPMAIL iframe')\n        except:\n                print(\"FAILED: Could not switch to iframe in YOPMAIL.\")\n                raise Exception\n    \n        try:\n                time.sleep(3)\n>               LoginEmailButton=wait.until(EC.element_to_be_clickable((By.XPATH,'//strong[text()=\"Log in to Akru TestNet\"]')))\n\nTenant/yopmail_login.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e34471094057f141b10520dc8461d79e\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x1111f13f0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       0   chromedriver                        0x0000000104b9c079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104b28403 chromedriver + 3970051\nE       2   chromedriver                        0x00000001047c3038 chromedriver + 409656\nE       3   chromedriver                        0x00000001047f92fd chromedriver + 631549\nE       4   chromedriver                        0x00000001047f9581 chromedriver + 632193\nE       5   chromedriver                        0x000000010482b4f4 chromedriver + 836852\nE       6   chromedriver                        0x00000001048167bd chromedriver + 751549\nE       7   chromedriver                        0x0000000104829221 chromedriver + 827937\nE       8   chromedriver                        0x0000000104816683 chromedriver + 751235\nE       9   chromedriver                        0x00000001047eca45 chromedriver + 580165\nE       10  chromedriver                        0x00000001047eda95 chromedriver + 584341\nE       11  chromedriver                        0x0000000104b6d55d chromedriver + 4253021\nE       12  chromedriver                        0x0000000104b723a1 chromedriver + 4273057\nE       13  chromedriver                        0x0000000104b7716f chromedriver + 4292975\nE       14  chromedriver                        0x0000000104b72dea chromedriver + 4275690\nE       15  chromedriver                        0x0000000104b4c54f chromedriver + 4117839\nE       16  chromedriver                        0x0000000104b8ced8 chromedriver + 4382424\nE       17  chromedriver                        0x0000000104b8d05f chromedriver + 4382815\nE       18  chromedriver                        0x0000000104ba38d5 chromedriver + 4475093\nE       19  libsystem_pthread.dylib             0x00007fff7162c109 _pthread_start + 148\nE       20  libsystem_pthread.dylib             0x00007fff71627b8b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:90: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Deposite.PythonOrgSearch testMethod=test_search_in_python_org>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e34471094057f141b10520dc8461d79e\")>\n\n    def test_search_in_python_org(self , driver):\n        driver = self.driver\n        driver.maximize_window()\n        url = variables.url\n    \n        action = ActionChains (driver)\n        def clearTextField():\n            action.key_down(Keys.COMMAND).perform()\n            action.send_keys('a').perform()\n            action.key_up(Keys.COMMAND).perform()\n            action.send_keys(Keys.BACK_SPACE).perform()\n    \n    \n        self.driver.get(url)\n        print('SUCCESS: \"'+url+'\" saved in webdriver')\n        wait = WebDriverWait(self.driver, 120)\n    \n        time.sleep(3)\n        try:\n            loginButton=wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,\"#navbar-header-sticky-login\")))\n            loginButton.click()\n            print('SUCCESS: Get Started button clicked')\n        except:\n            print(\"FAILED: Get Started button could not be clicked\")\n            raise Exception\n    \n        try:\n            tenant_portal = wait.until(EC.element_to_be_clickable((By.XPATH,     \"//button[. = 'Tenant portal']\")))\n            tenant_portal.click()\n            print('SUCCESS: Tenant portal option clicked')\n        except:\n            print(\"FAILED: Tenant portal option could not be clicked\")\n            raise Exception\n    \n        def cookiesHandle():\n            try:\n                time.sleep(3)\n                cookiesClickerFound=wait.until(EC.element_to_be_clickable((By.XPATH,\"//div[@class='d-flex justify-content-end']/button[3]\")))\n                cookiesClickerFound.click()\n                print('SUCCESS: \"Allow all cookies\" button clicked')\n            except:\n                print('FAILED: \"Allow all cookies\" button could not be clicked')\n                raise Exception\n        cookiesHandle()\n    \n        try:\n            mo = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,  \"#navbar-select-magic\")))\n            mo.click()\n            print('SUCCESS: Email option from modale clicked')\n        except:\n            print(\"FAILED: Email option from modale could not be clicked\")\n            raise Exception\n    \n    \n        try:\n            emailbox = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,  \"#navbar-magic-email\")))\n            emailbox.click()\n            print('SUCCESS: email box clicked')\n        except:\n            print(\"FAILED: email box could not be clicked\")\n            raise Exception\n    \n        try:\n            email = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"#navbar-magic-email\")))\n            email.click()\n            clearTextField()\n            email.send_keys(variables.login_email)\n            print('SUCCESS: email entered successfully')\n        except:\n            print(\"FAILED: email could not be entered\")\n            raise Exception\n    \n        try:\n            next_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,  \"#navbar-magic-next\")))\n            next_button.click()\n            print('SUCCESS:Next button clicked')\n        except:\n            print(\"FAILED:Next button could not be clicked\")\n            raise Exception\n    \n        try:\n            if(wait.until(EC.visibility_of_element_located(By.CLASS_NAME , 'loader-overlay'))):\n                print(\"SUCCESS: Loader found\")\n                loaderremove = wait.until(EC.invisibility_of_element_located((By.CLASS_NAME, 'loader-overlay')))\n                print(\"SUCCESS: Loader disappeared successfully\")\n            else:\n                print(\"FAILED: loader did not disappeared or still loading\")\n    \n        except:\n            print(\"FAILED: Loader did not open\")\n    \n    \n        # Login from yopmail\n        ym = yopmail(driver)\n>       ym.run()\n\nTenant/Deposite.py:149: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <yopmail_login.yopmail object at 0x111196f50>\n\n    def run(self):\n        driver = self.driver\n        wait = WebDriverWait(self.driver, 120)\n    \n        driver.execute_script(\"window.open('http://www.yopmail.com', 'new window')\")\n        driver.switch_to.window(self.driver.window_handles[1])\n    \n    \n    \n        # try:\n        #     email_text = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,  \"#login\")))\n        #     email_text.click()\n        #     print('SUCCESS:Email Text feild clicked')\n        # except:\n        #     print(\"FAILED:Email Text feild could not be clicked\")\n        #     raise Exception\n    \n    \n        try:\n            login = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,\"#login\")))\n            login.click()\n    \n            login.clear()\n    \n            login.send_keys(variables.login_email)\n            login.send_keys(Keys.ENTER)\n            print('SUCCESS: Email entered successfully')\n    \n        except:\n            print(\"FAILED:Email could not be entered\")\n            raise Exception\n    \n        time.sleep(3)\n        driver.refresh()\n        time.sleep(5)\n    \n        try:\n                driver.switch_to.frame('ifmail')\n                print('SUCCESS: Switched to YOPMAIL iframe')\n        except:\n                print(\"FAILED: Could not switch to iframe in YOPMAIL.\")\n                raise Exception\n    \n        try:\n                time.sleep(3)\n                LoginEmailButton=wait.until(EC.element_to_be_clickable((By.XPATH,'//strong[text()=\"Log in to Akru TestNet\"]')))\n                LoginEmailButton.click()\n                print('SUCCESS: \"Log in to Akru TestNet\" button clicked from YOPMAIL')\n        except:\n                print('FAILED: Could not find \"Log in to Akru TestNet\" button.')\n>               raise Exception\nE               Exception\n\nTenant/yopmail_login.py:76: Exception"}, "attachments": [{"name": "stdout", "source": "07cb2958-15ea-4e08-9fc1-72cc851d918c-attachment.txt", "type": "text/plain"}], "start": 1657734178790, "stop": 1657734585205, "uuid": "76dc3e11-44dd-46d8-94e3-2b55df73019d", "historyId": "c5c3ce9136e9ebb05173f596657c6a83", "testCaseId": "4cf51a6184c9848916d0621a70bb8148", "fullName": "Tenant.Deposite.PythonOrgSearch#test_search_in_python_org", "labels": [{"name": "parentSuite", "value": "Tenant"}, {"name": "suite", "value": "Deposite"}, {"name": "subSuite", "value": "PythonOrgSearch"}, {"name": "host", "value": "Asads-MacBook-Pro.local"}, {"name": "thread", "value": "13943-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tenant.Deposite"}]}