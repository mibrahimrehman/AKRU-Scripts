{"name": "test_search_in_python_org", "status": "broken", "statusDetails": {"message": "Exception", "trace": "self = <Individual_Signup.PythonOrgSearch testMethod=test_search_in_python_org>\n\n    def test_search_in_python_org(self):\n        self.driver.maximize_window()\n        url = \"https://avaxdev.akru.co\"\n        fname = names.get_first_name()\n        lname = names.get_last_name()\n        email = fname + lname + '123@yopmail.com'\n        phone_no = '5678956789'\n    \n        action = ActionChains (self.driver)\n        def clearTextField():\n            action.key_down(Keys.COMMAND).perform()\n            action.send_keys('a').perform()\n            action.key_up(Keys.COMMAND).perform()\n            action.send_keys(Keys.BACK_SPACE).perform()\n    \n        self.driver.get(url)\n        print('SUCCESS: \"'+url+'\" saved in webdriver')\n        wait = WebDriverWait(self.driver, 120)\n    \n        time.sleep(3)\n        try:\n            loginButton=wait.until(EC.element_to_be_clickable((By.ID,\"navbar-header-sticky-starter\")))\n            loginButton.click()\n            print('SUCCESS: Get Started button clicked')\n        except:\n            print(\"FAILED: Get Started button could not be clicked\")\n            raise Exception\n    \n        try:\n            yesAccreditedInvestor=wait.until(EC.visibility_of_element_located((By.CLASS_NAME,'check-label')))\n            yesAccreditedInvestor.click()\n            print('SUCCESS: Yes selected for \"Are you an accredited investor?\"')\n        except:\n            print('FAILED: Yes could not be selected for \"Are you an accredited investor?\"')\n            raise Exception\n    \n        try:\n            continueAccreditedInvestor=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[@class=\"primary-btn\"][text()=\"Continue\"]')))\n            continueAccreditedInvestor.click()\n            print('SUCCESS: Continue button clicked for \"Are you an accredited investor?\"')\n        except:\n            print('FAILED: Continue button could not be clicked for \"Are you an accredited investor?\"')\n            raise Exception\n    \n        try:\n            starterPackageSelect=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[text()=\"Select this plan\"]')))\n            starterPackageSelect.click()\n            print('SUCCESS: Select this plan button is clicked for starter packages')\n        except:\n            print(\"FAILED: Select this plan button could not be clicked for starter packages\")\n            raise Exception\n    \n        try:\n            investmentPlanSelect=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[text()=\"Select this plan\"]')))\n            investmentPlanSelect.click()\n            print('SUCCESS: Select this plan button is clicked for investment plans')\n        except:\n            print(\"FAILED: Select this plan button could not be clicked for investment plans\")\n            raise Exception\n    \n        try:\n            fnameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"firstName\"]')))\n            fnameToBeEntered.send_keys(fname)\n            print('SUCCESS: First name is entered')\n        except:\n            print(\"FAILED: First name could not be entered\")\n            raise Exception\n    \n        try:\n            lnameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"lastName\"]')))\n            lnameToBeEntered.send_keys(lname)\n            print('SUCCESS: Last name is entered')\n        except:\n            print(\"FAILED: Last name could not be entered\")\n            raise Exception\n    \n        try:\n            emailToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"email\"]')))\n            emailToBeEntered.send_keys(email)\n            print('SUCCESS: Email is entered')\n        except:\n            print(\"FAILED: Email could not be entered\")\n            raise Exception\n    \n        try:\n            phnoToBeEntered=wait.until(EC.element_to_be_clickable((By.ID,'signup-phone')))\n            phnoToBeEntered.click()\n            clearTextField()\n            phnoToBeEntered.send_keys(phone_no)\n            print('SUCCESS: Phone number is entered')\n        except:\n            print(\"FAILED: Phone number could not be entered\")\n            raise Exception\n    \n        try:\n            agreeTermsAndPrivacy=wait.until(EC.visibility_of_element_located((By.CLASS_NAME,'check-label')))\n            agreeTermsAndPrivacy.click()\n            print(\"SUCCESS: To agree to AKRU's terms and privacy policy Checkbox clicked\")\n        except:\n            print(\"FAILED: To agree to AKRU's terms and privacy policy Checkbox could not be clicked\")\n            raise Exception\n    \n        try:\n            agreeAndContinueToSendSignupEmail=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[@class=\"primary-btn mr-1 \"]')))\n            agreeAndContinueToSendSignupEmail.click()\n            print('SUCCESS: Agree & Continue button clicked')\n        except:\n            print(\"FAILED: Could not click Agree & Continue button\")\n            raise Exception\n    \n        time.sleep(15)\n    \n        try:\n            modalWhenEmailisSent=wait.until(EC.visibility_of_element_located((By.XPATH,'//h5[@class=\"title\"]')))\n            print(\"SUCCESS: 'Verify Your Email' modal appeared\")\n        except:\n            print(\"FAILED: 'Verify Your Email' modal could not be appeared\")\n            raise Exception\n    \n        def emailLogin():\n            self.driver.execute_script(\"window.open('http://www.yopmail.com', 'new window')\")\n            self.driver.switch_to.window(self.driver.window_handles[1])\n            print('SUCCESS: Switched to YOPMAIL tab')\n    \n            try:\n                time.sleep(3)\n                search = wait.until(EC.element_to_be_clickable((By.ID,\"login\")))\n                search.clear()\n                search.send_keys(email)\n                search.send_keys(Keys.RETURN)\n                print('SUCCESS: Email entered in YOPMAIL input field')\n            except:\n                print('FAILED: Email could not be entered in YOPMAIL input field')\n                raise Exception\n    \n            time.sleep(3)\n            self.driver.refresh()\n            time.sleep(5)\n    \n            try:\n                self.driver.switch_to.frame('ifmail')\n            except:\n                print(\"FAILED: Could not switch to iframe in YOPMAIL.\")\n                raise Exception\n    \n            try:\n                time.sleep(3)\n                LoginEmailButton=wait.until(EC.element_to_be_clickable((By.XPATH,'//b[text()=\"Verify Email\"]')))\n                LoginEmailButton.click()\n                print('SUCCESS: \"Verfy Email\" button clicked from YOPMAIL')\n            except:\n                print('FAILED: Could not click \"Verify Email\" button. Possibly due to captcha.')\n                raise Exception\n    \n        emailLogin()\n    \n        time.sleep(10)\n        self.driver.switch_to.window(self.driver.window_handles[0])\n        self.driver.close()\n        self.driver.switch_to.window(self.driver.window_handles[0])\n        self.driver.close()\n        self.driver.switch_to.window(self.driver.window_handles[0])\n    \n    \n        try:\n            addressToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"address\"]')))\n            addressToBeEntered.click()\n            clearTextField()\n            addressToBeEntered.send_keys('3825 Edwards Rd, #103, Cincinnati, OH 45209')\n            print('SUCCESS: Address is entered')\n        except:\n            print(\"FAILED: Address could not be entered\")\n            raise Exception\n    \n        try:\n            stateToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"stateName\"]')))\n            stateToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//select[@name=\"stateName\"]//option[@value=\"Ohio\"]'):\n                if option.text == 'Ohio':\n                    option.click()\n                    break\n            print(\"SUCCESS: State 'Ohio' is selected from dropdown\")\n        except:\n            print(\"FAILED: State 'Ohio' could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            cityToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"city\"]')))\n            cityToBeEntered.click()\n            clearTextField()\n            cityToBeEntered.send_keys('Cincinnati')\n            print('SUCCESS: City is entered')\n        except:\n            print(\"FAILED: City could not be entered\")\n            raise Exception\n    \n        try:\n            zipCodeToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"zipCode\"]')))\n            zipCodeToBeEntered.click()\n            clearTextField()\n            zipCodeToBeEntered.send_keys('45209')\n            print('SUCCESS: Zip code is entered')\n        except:\n            print(\"FAILED: Zip code could not be entered\")\n            raise Exception\n    \n        try:\n            verfiybuttonToSendOTP=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[text()=\"Verify\"]')))\n            verfiybuttonToSendOTP.click()\n            print('SUCCESS: Verify button is clicked to verify phone number')\n        except:\n            print(\"FAILED: Verify button could not be clicked to verify phone number\")\n            raise Exception\n    \n        time.sleep(10)\n        self.driver.execute_script(\"window.open('');\")\n        self.driver.switch_to.window(self.driver.window_handles[1])\n        self.driver.get('https://avaxdevapi.akru.co/api/user/showOtp/'+email)\n        otp = wait.until(EC.element_to_be_clickable((By.XPATH, '/html/body/pre')))\n        otp_array = list(otp.text)\n        otp_code = otp_array[39] + otp_array[40] + \\\n            otp_array[41] + otp_array[42]\n    \n        self.driver.close()\n        self.driver.switch_to.window(self.driver.window_handles[0])\n    \n        try:\n            otptobeentered = wait.until(EC.element_to_be_clickable((By.XPATH, '//input[@name=\"otp\"]')))\n            otptobeentered.send_keys(otp_code)\n            print('SUCCESS: OTP is entered')\n        except:\n            print(\"FAILED: Could not enter OTP\")\n            raise Exception\n    \n        try:\n            dobToBeEntered=wait.until(EC.element_to_be_clickable((By.ID,'date-picker-dialog')))\n            dobToBeEntered.send_keys(Keys.BACKSPACE)\n            dobToBeEntered.send_keys('0')\n            print('SUCCESS: Date of Birth is entered')\n        except:\n            print(\"FAILED: Could not enter date of birth\")\n            raise Exception\n    \n        try:\n            SSNToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"securityNumber\"]')))\n            SSNToBeEntered.send_keys('123456789')\n            print('SUCCESS: SSN is entered')\n        except:\n            print(\"FAILED: SSN could not be entered\")\n            raise Exception\n    \n        try:\n            continueButtonAfterStep2Completion=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[@class=\"primary-btn mr-1\"]')))\n            continueButtonAfterStep2Completion.click()\n            print('SUCCESS: Continue button is clicked after filling the form on step 2')\n        except:\n            print(\"FAILED: Continue button could not be clicked after filling the form on step 2\")\n            raise Exception\n    \n        try:\n            time.sleep(5)\n            loader = wait.until(EC.invisibility_of_element_located((By.CLASS_NAME, 'loader-overlay')))\n            time.sleep(5)\n            print('SUCCESS: Loader Disappeared')\n        except:\n            print('FAILED: Loader did not appear or still loading')\n    \n    \n    \n        try:\n            stateToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//div[@id=\"investor-purpose\"]')))\n            stateToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//li[@data-value=\"capitalAppreciation\"]'):\n                #if option.text == 'Ohio'\n                if True:\n                    option.click()\n                    break\n            print(\"SUCCESS: investor purpose , Capital Appreciation Supported is selected\")\n        except:\n            print(\"FAILED: investor purpose , Capital Appreciation Supported is not selected\")\n            raise Exception\n    \n    \n    \n        try:\n            stateToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//div[@id=\"isTradingLowSecurities\"]')))\n            stateToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//li[@data-value=\"true\"]'):\n                #if option.text == 'Ohio'\n                if True:\n                    option.click()\n                    break\n            print(\"SUCCESS: Low trade volume , yes is selected\")\n        except:\n            print(\"FAILED: Low trade volume , yes is not selected\")\n            raise Exception\n    \n    \n        try:\n>           stateToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"employmentStatus\"]')))\n\nFront-user/SIGNUPS/Individual_Signup.py:336: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"59521e3d8f117db39e26593326f7f47c\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x10c317e20>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       0   chromedriver                        0x000000010cb02079 chromedriver + 4444281\nE       1   chromedriver                        0x000000010ca8e403 chromedriver + 3970051\nE       2   chromedriver                        0x000000010c729038 chromedriver + 409656\nE       3   chromedriver                        0x000000010c75f2fd chromedriver + 631549\nE       4   chromedriver                        0x000000010c75f581 chromedriver + 632193\nE       5   chromedriver                        0x000000010c7914f4 chromedriver + 836852\nE       6   chromedriver                        0x000000010c77c7bd chromedriver + 751549\nE       7   chromedriver                        0x000000010c78f221 chromedriver + 827937\nE       8   chromedriver                        0x000000010c77c683 chromedriver + 751235\nE       9   chromedriver                        0x000000010c752a45 chromedriver + 580165\nE       10  chromedriver                        0x000000010c753a95 chromedriver + 584341\nE       11  chromedriver                        0x000000010cad355d chromedriver + 4253021\nE       12  chromedriver                        0x000000010cad83a1 chromedriver + 4273057\nE       13  chromedriver                        0x000000010cadd16f chromedriver + 4292975\nE       14  chromedriver                        0x000000010cad8dea chromedriver + 4275690\nE       15  chromedriver                        0x000000010cab254f chromedriver + 4117839\nE       16  chromedriver                        0x000000010caf2ed8 chromedriver + 4382424\nE       17  chromedriver                        0x000000010caf305f chromedriver + 4382815\nE       18  chromedriver                        0x000000010cb098d5 chromedriver + 4475093\nE       19  libsystem_pthread.dylib             0x00007fff7162c109 _pthread_start + 148\nE       20  libsystem_pthread.dylib             0x00007fff71627b8b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:90: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Individual_Signup.PythonOrgSearch testMethod=test_search_in_python_org>\n\n    def test_search_in_python_org(self):\n        self.driver.maximize_window()\n        url = \"https://avaxdev.akru.co\"\n        fname = names.get_first_name()\n        lname = names.get_last_name()\n        email = fname + lname + '123@yopmail.com'\n        phone_no = '5678956789'\n    \n        action = ActionChains (self.driver)\n        def clearTextField():\n            action.key_down(Keys.COMMAND).perform()\n            action.send_keys('a').perform()\n            action.key_up(Keys.COMMAND).perform()\n            action.send_keys(Keys.BACK_SPACE).perform()\n    \n        self.driver.get(url)\n        print('SUCCESS: \"'+url+'\" saved in webdriver')\n        wait = WebDriverWait(self.driver, 120)\n    \n        time.sleep(3)\n        try:\n            loginButton=wait.until(EC.element_to_be_clickable((By.ID,\"navbar-header-sticky-starter\")))\n            loginButton.click()\n            print('SUCCESS: Get Started button clicked')\n        except:\n            print(\"FAILED: Get Started button could not be clicked\")\n            raise Exception\n    \n        try:\n            yesAccreditedInvestor=wait.until(EC.visibility_of_element_located((By.CLASS_NAME,'check-label')))\n            yesAccreditedInvestor.click()\n            print('SUCCESS: Yes selected for \"Are you an accredited investor?\"')\n        except:\n            print('FAILED: Yes could not be selected for \"Are you an accredited investor?\"')\n            raise Exception\n    \n        try:\n            continueAccreditedInvestor=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[@class=\"primary-btn\"][text()=\"Continue\"]')))\n            continueAccreditedInvestor.click()\n            print('SUCCESS: Continue button clicked for \"Are you an accredited investor?\"')\n        except:\n            print('FAILED: Continue button could not be clicked for \"Are you an accredited investor?\"')\n            raise Exception\n    \n        try:\n            starterPackageSelect=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[text()=\"Select this plan\"]')))\n            starterPackageSelect.click()\n            print('SUCCESS: Select this plan button is clicked for starter packages')\n        except:\n            print(\"FAILED: Select this plan button could not be clicked for starter packages\")\n            raise Exception\n    \n        try:\n            investmentPlanSelect=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[text()=\"Select this plan\"]')))\n            investmentPlanSelect.click()\n            print('SUCCESS: Select this plan button is clicked for investment plans')\n        except:\n            print(\"FAILED: Select this plan button could not be clicked for investment plans\")\n            raise Exception\n    \n        try:\n            fnameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"firstName\"]')))\n            fnameToBeEntered.send_keys(fname)\n            print('SUCCESS: First name is entered')\n        except:\n            print(\"FAILED: First name could not be entered\")\n            raise Exception\n    \n        try:\n            lnameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"lastName\"]')))\n            lnameToBeEntered.send_keys(lname)\n            print('SUCCESS: Last name is entered')\n        except:\n            print(\"FAILED: Last name could not be entered\")\n            raise Exception\n    \n        try:\n            emailToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"email\"]')))\n            emailToBeEntered.send_keys(email)\n            print('SUCCESS: Email is entered')\n        except:\n            print(\"FAILED: Email could not be entered\")\n            raise Exception\n    \n        try:\n            phnoToBeEntered=wait.until(EC.element_to_be_clickable((By.ID,'signup-phone')))\n            phnoToBeEntered.click()\n            clearTextField()\n            phnoToBeEntered.send_keys(phone_no)\n            print('SUCCESS: Phone number is entered')\n        except:\n            print(\"FAILED: Phone number could not be entered\")\n            raise Exception\n    \n        try:\n            agreeTermsAndPrivacy=wait.until(EC.visibility_of_element_located((By.CLASS_NAME,'check-label')))\n            agreeTermsAndPrivacy.click()\n            print(\"SUCCESS: To agree to AKRU's terms and privacy policy Checkbox clicked\")\n        except:\n            print(\"FAILED: To agree to AKRU's terms and privacy policy Checkbox could not be clicked\")\n            raise Exception\n    \n        try:\n            agreeAndContinueToSendSignupEmail=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[@class=\"primary-btn mr-1 \"]')))\n            agreeAndContinueToSendSignupEmail.click()\n            print('SUCCESS: Agree & Continue button clicked')\n        except:\n            print(\"FAILED: Could not click Agree & Continue button\")\n            raise Exception\n    \n        time.sleep(15)\n    \n        try:\n            modalWhenEmailisSent=wait.until(EC.visibility_of_element_located((By.XPATH,'//h5[@class=\"title\"]')))\n            print(\"SUCCESS: 'Verify Your Email' modal appeared\")\n        except:\n            print(\"FAILED: 'Verify Your Email' modal could not be appeared\")\n            raise Exception\n    \n        def emailLogin():\n            self.driver.execute_script(\"window.open('http://www.yopmail.com', 'new window')\")\n            self.driver.switch_to.window(self.driver.window_handles[1])\n            print('SUCCESS: Switched to YOPMAIL tab')\n    \n            try:\n                time.sleep(3)\n                search = wait.until(EC.element_to_be_clickable((By.ID,\"login\")))\n                search.clear()\n                search.send_keys(email)\n                search.send_keys(Keys.RETURN)\n                print('SUCCESS: Email entered in YOPMAIL input field')\n            except:\n                print('FAILED: Email could not be entered in YOPMAIL input field')\n                raise Exception\n    \n            time.sleep(3)\n            self.driver.refresh()\n            time.sleep(5)\n    \n            try:\n                self.driver.switch_to.frame('ifmail')\n            except:\n                print(\"FAILED: Could not switch to iframe in YOPMAIL.\")\n                raise Exception\n    \n            try:\n                time.sleep(3)\n                LoginEmailButton=wait.until(EC.element_to_be_clickable((By.XPATH,'//b[text()=\"Verify Email\"]')))\n                LoginEmailButton.click()\n                print('SUCCESS: \"Verfy Email\" button clicked from YOPMAIL')\n            except:\n                print('FAILED: Could not click \"Verify Email\" button. Possibly due to captcha.')\n                raise Exception\n    \n        emailLogin()\n    \n        time.sleep(10)\n        self.driver.switch_to.window(self.driver.window_handles[0])\n        self.driver.close()\n        self.driver.switch_to.window(self.driver.window_handles[0])\n        self.driver.close()\n        self.driver.switch_to.window(self.driver.window_handles[0])\n    \n    \n        try:\n            addressToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"address\"]')))\n            addressToBeEntered.click()\n            clearTextField()\n            addressToBeEntered.send_keys('3825 Edwards Rd, #103, Cincinnati, OH 45209')\n            print('SUCCESS: Address is entered')\n        except:\n            print(\"FAILED: Address could not be entered\")\n            raise Exception\n    \n        try:\n            stateToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"stateName\"]')))\n            stateToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//select[@name=\"stateName\"]//option[@value=\"Ohio\"]'):\n                if option.text == 'Ohio':\n                    option.click()\n                    break\n            print(\"SUCCESS: State 'Ohio' is selected from dropdown\")\n        except:\n            print(\"FAILED: State 'Ohio' could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            cityToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"city\"]')))\n            cityToBeEntered.click()\n            clearTextField()\n            cityToBeEntered.send_keys('Cincinnati')\n            print('SUCCESS: City is entered')\n        except:\n            print(\"FAILED: City could not be entered\")\n            raise Exception\n    \n        try:\n            zipCodeToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"zipCode\"]')))\n            zipCodeToBeEntered.click()\n            clearTextField()\n            zipCodeToBeEntered.send_keys('45209')\n            print('SUCCESS: Zip code is entered')\n        except:\n            print(\"FAILED: Zip code could not be entered\")\n            raise Exception\n    \n        try:\n            verfiybuttonToSendOTP=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[text()=\"Verify\"]')))\n            verfiybuttonToSendOTP.click()\n            print('SUCCESS: Verify button is clicked to verify phone number')\n        except:\n            print(\"FAILED: Verify button could not be clicked to verify phone number\")\n            raise Exception\n    \n        time.sleep(10)\n        self.driver.execute_script(\"window.open('');\")\n        self.driver.switch_to.window(self.driver.window_handles[1])\n        self.driver.get('https://avaxdevapi.akru.co/api/user/showOtp/'+email)\n        otp = wait.until(EC.element_to_be_clickable((By.XPATH, '/html/body/pre')))\n        otp_array = list(otp.text)\n        otp_code = otp_array[39] + otp_array[40] + \\\n            otp_array[41] + otp_array[42]\n    \n        self.driver.close()\n        self.driver.switch_to.window(self.driver.window_handles[0])\n    \n        try:\n            otptobeentered = wait.until(EC.element_to_be_clickable((By.XPATH, '//input[@name=\"otp\"]')))\n            otptobeentered.send_keys(otp_code)\n            print('SUCCESS: OTP is entered')\n        except:\n            print(\"FAILED: Could not enter OTP\")\n            raise Exception\n    \n        try:\n            dobToBeEntered=wait.until(EC.element_to_be_clickable((By.ID,'date-picker-dialog')))\n            dobToBeEntered.send_keys(Keys.BACKSPACE)\n            dobToBeEntered.send_keys('0')\n            print('SUCCESS: Date of Birth is entered')\n        except:\n            print(\"FAILED: Could not enter date of birth\")\n            raise Exception\n    \n        try:\n            SSNToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"securityNumber\"]')))\n            SSNToBeEntered.send_keys('123456789')\n            print('SUCCESS: SSN is entered')\n        except:\n            print(\"FAILED: SSN could not be entered\")\n            raise Exception\n    \n        try:\n            continueButtonAfterStep2Completion=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[@class=\"primary-btn mr-1\"]')))\n            continueButtonAfterStep2Completion.click()\n            print('SUCCESS: Continue button is clicked after filling the form on step 2')\n        except:\n            print(\"FAILED: Continue button could not be clicked after filling the form on step 2\")\n            raise Exception\n    \n        try:\n            time.sleep(5)\n            loader = wait.until(EC.invisibility_of_element_located((By.CLASS_NAME, 'loader-overlay')))\n            time.sleep(5)\n            print('SUCCESS: Loader Disappeared')\n        except:\n            print('FAILED: Loader did not appear or still loading')\n    \n    \n    \n        try:\n            stateToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//div[@id=\"investor-purpose\"]')))\n            stateToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//li[@data-value=\"capitalAppreciation\"]'):\n                #if option.text == 'Ohio'\n                if True:\n                    option.click()\n                    break\n            print(\"SUCCESS: investor purpose , Capital Appreciation Supported is selected\")\n        except:\n            print(\"FAILED: investor purpose , Capital Appreciation Supported is not selected\")\n            raise Exception\n    \n    \n    \n        try:\n            stateToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//div[@id=\"isTradingLowSecurities\"]')))\n            stateToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//li[@data-value=\"true\"]'):\n                #if option.text == 'Ohio'\n                if True:\n                    option.click()\n                    break\n            print(\"SUCCESS: Low trade volume , yes is selected\")\n        except:\n            print(\"FAILED: Low trade volume , yes is not selected\")\n            raise Exception\n    \n    \n        try:\n            stateToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"employmentStatus\"]')))\n            stateToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//select[@name=\"employmentStatus\"]//option[@value=\"unemployed\"]'):\n                #if option.text == 'Ohio'\n                if True:\n                    option.click()\n                    break\n            print(\"SUCCESS: Employement status , unemployed is selected\")\n        except:\n            print(\"FAILED: Employement status , unemployed is not selected\")\n>           raise Exception\nE           Exception\n\nFront-user/SIGNUPS/Individual_Signup.py:346: Exception"}, "attachments": [{"name": "screenshot", "source": "524a1b37-7c49-4544-9eca-1f5a93c9b790-attachment.png", "type": "image/png"}, {"name": "log", "source": "b675886a-b431-460f-bf33-9e52a9b82adc-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "28ebc35f-1c24-49ae-a082-f413f827ac26-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "9276b498-ca5e-4921-9059-6678836bfdff-attachment.txt", "type": "text/plain"}], "start": 1657732798620, "stop": 1657733106907, "uuid": "f333f88c-aa5d-4d0a-9fe8-a807416e4d1b", "historyId": "94b746196c0b253348973d7017faa128", "testCaseId": "2311e8a638fbd4f779bfe73e02ba071c", "fullName": "Front-user.SIGNUPS.Individual_Signup.PythonOrgSearch#test_search_in_python_org", "labels": [{"name": "parentSuite", "value": "Front-user.SIGNUPS"}, {"name": "suite", "value": "Individual_Signup"}, {"name": "subSuite", "value": "PythonOrgSearch"}, {"name": "host", "value": "Asads-MacBook-Pro.local"}, {"name": "thread", "value": "13431-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Front-user.SIGNUPS.Individual_Signup"}]}