{"name": "test_search_in_python_org", "status": "broken", "statusDetails": {"message": "Exception", "trace": "def emailLogin():\n        self.driver.execute_script(\"window.open('http://www.yopmail.com', 'new window')\")\n        self.driver.switch_to.window(self.driver.window_handles[1])\n        print('SUCCESS: Switched to YOPMAIL tab')\n    \n        try:\n            time.sleep(3)\n            search = wait.until(EC.element_to_be_clickable((By.ID,\"login\")))\n            search.clear()\n            search.send_keys(email)\n>           search.send_keys(Keys.RETURN)\n\nFront-user/SIGNUPS/Individual_Signup.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"108025119a1cfe5f493bb0988607c3c8\", element=\"9ae7bda2-9ff5-49bb-b2b4-e5eef8149599\")>\nvalue = ('\\ue006',)\n\n    def send_keys(self, *value) -> None:\n        \"\"\"Simulates typing into the element.\n    \n        :Args:\n            - value - A string for typing, or setting form fields.  For setting\n              file inputs, this could be a local file path.\n    \n        Use this to send simple key events or to fill out form fields::\n    \n            form_textfield = driver.find_element(By.NAME, 'username')\n            form_textfield.send_keys(\"admin\")\n    \n        This can also be used to set file inputs.\n    \n        ::\n    \n            file_input = driver.find_element(By.NAME, 'profilePic')\n            file_input.send_keys(\"path/to/profilepic.gif\")\n            # Generally it's better to wrap the file path in one of the methods\n            # in os.path to return the actual path to support cross OS testing.\n            # file_input.send_keys(os.path.abspath(\"path/to/profilepic.gif\"))\n    \n        \"\"\"\n        # transfer file to another machine only if remote driver is used\n        # the same behaviour as for java binding\n        if self.parent._is_remote:\n            local_files = list(map(lambda keys_to_send:\n                                   self.parent.file_detector.is_local_file(str(keys_to_send)),\n                                   ''.join(map(str, value)).split('\\n')))\n            if None not in local_files:\n                remote_files = []\n                for file in local_files:\n                    remote_files.append(self._upload(file))\n                value = '\\n'.join(remote_files)\n    \n>       self._execute(Command.SEND_KEYS_TO_ELEMENT,\n                      {'text': \"\".join(keys_to_typing(value)),\n                       'value': keys_to_typing(value)})\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"108025119a1cfe5f493bb0988607c3c8\", element=\"9ae7bda2-9ff5-49bb-b2b4-e5eef8149599\")>\ncommand = 'sendKeysToElement'\nparams = {'id': '9ae7bda2-9ff5-49bb-b2b4-e5eef8149599', 'sessionId': '108025119a1cfe5f493bb0988607c3c8', 'text': '\\ue006', 'value': ['\\ue006']}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:396: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"108025119a1cfe5f493bb0988607c3c8\")>\ndriver_command = 'sendKeysToElement'\nparams = {'id': '9ae7bda2-9ff5-49bb-b2b4-e5eef8149599', 'text': '\\ue006', 'value': ['\\ue006']}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x109cf3f70>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\...fff7162c109 _pthread_start + 148\\\\n27  libsystem_pthread.dylib             0x00007fff71627b8b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from unknown error: unexpected command response\nE         (Session info: chrome=103.0.5060.114)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010b84f079 chromedriver + 4444281\nE       1   chromedriver                        0x000000010b7db403 chromedriver + 3970051\nE       2   chromedriver                        0x000000010b476038 chromedriver + 409656\nE       3   chromedriver                        0x000000010b4633c8 chromedriver + 332744\nE       4   chromedriver                        0x000000010b462ac7 chromedriver + 330439\nE       5   chromedriver                        0x000000010b462047 chromedriver + 327751\nE       6   chromedriver                        0x000000010b460f16 chromedriver + 323350\nE       7   chromedriver                        0x000000010b46144c chromedriver + 324684\nE       8   chromedriver                        0x000000010b46e67e chromedriver + 378494\nE       9   chromedriver                        0x000000010b46ef22 chromedriver + 380706\nE       10  chromedriver                        0x000000010b47d5b3 chromedriver + 439731\nE       11  chromedriver                        0x000000010b48147a chromedriver + 455802\nE       12  chromedriver                        0x000000010b46177e chromedriver + 325502\nE       13  chromedriver                        0x000000010b47d1fa chromedriver + 438778\nE       14  chromedriver                        0x000000010b4dc62d chromedriver + 828973\nE       15  chromedriver                        0x000000010b4c9683 chromedriver + 751235\nE       16  chromedriver                        0x000000010b49fa45 chromedriver + 580165\nE       17  chromedriver                        0x000000010b4a0a95 chromedriver + 584341\nE       18  chromedriver                        0x000000010b82055d chromedriver + 4253021\nE       19  chromedriver                        0x000000010b8253a1 chromedriver + 4273057\nE       20  chromedriver                        0x000000010b82a16f chromedriver + 4292975\nE       21  chromedriver                        0x000000010b825dea chromedriver + 4275690\nE       22  chromedriver                        0x000000010b7ff54f chromedriver + 4117839\nE       23  chromedriver                        0x000000010b83fed8 chromedriver + 4382424\nE       24  chromedriver                        0x000000010b84005f chromedriver + 4382815\nE       25  chromedriver                        0x000000010b8568d5 chromedriver + 4475093\nE       26  libsystem_pthread.dylib             0x00007fff7162c109 _pthread_start + 148\nE       27  libsystem_pthread.dylib             0x00007fff71627b8b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Individual_Signup.PythonOrgSearch testMethod=test_search_in_python_org>\n\n    def test_search_in_python_org(self):\n        self.driver.maximize_window()\n        url = \"https://avaxdev.akru.co\"\n        fname = names.get_first_name()\n        lname = names.get_last_name()\n        email = fname + lname + '123@yopmail.com'\n        phone_no = '5678956789'\n    \n        action = ActionChains (self.driver)\n        def clearTextField():\n            action.key_down(Keys.COMMAND).perform()\n            action.send_keys('a').perform()\n            action.key_up(Keys.COMMAND).perform()\n            action.send_keys(Keys.BACK_SPACE).perform()\n    \n        self.driver.get(url)\n        print('SUCCESS: \"'+url+'\" saved in webdriver')\n        wait = WebDriverWait(self.driver, 120)\n    \n        time.sleep(3)\n        try:\n            loginButton=wait.until(EC.element_to_be_clickable((By.ID,\"navbar-header-sticky-starter\")))\n            loginButton.click()\n            print('SUCCESS: Get Started button clicked')\n        except:\n            print(\"FAILED: Get Started button could not be clicked\")\n            raise Exception\n    \n        try:\n            yesAccreditedInvestor=wait.until(EC.visibility_of_element_located((By.CLASS_NAME,'check-label')))\n            yesAccreditedInvestor.click()\n            print('SUCCESS: Yes selected for \"Are you an accredited investor?\"')\n        except:\n            print('FAILED: Yes could not be selected for \"Are you an accredited investor?\"')\n            raise Exception\n    \n        try:\n            continueAccreditedInvestor=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[@class=\"primary-btn\"][text()=\"Continue\"]')))\n            continueAccreditedInvestor.click()\n            print('SUCCESS: Continue button clicked for \"Are you an accredited investor?\"')\n        except:\n            print('FAILED: Continue button could not be clicked for \"Are you an accredited investor?\"')\n            raise Exception\n    \n        try:\n            starterPackageSelect=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[text()=\"Select this plan\"]')))\n            starterPackageSelect.click()\n            print('SUCCESS: Select this plan button is clicked for starter packages')\n        except:\n            print(\"FAILED: Select this plan button could not be clicked for starter packages\")\n            raise Exception\n    \n        try:\n            investmentPlanSelect=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[text()=\"Select this plan\"]')))\n            investmentPlanSelect.click()\n            print('SUCCESS: Select this plan button is clicked for investment plans')\n        except:\n            print(\"FAILED: Select this plan button could not be clicked for investment plans\")\n            raise Exception\n    \n        try:\n            fnameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"firstName\"]')))\n            fnameToBeEntered.send_keys(fname)\n            print('SUCCESS: First name is entered')\n        except:\n            print(\"FAILED: First name could not be entered\")\n            raise Exception\n    \n        try:\n            lnameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"lastName\"]')))\n            lnameToBeEntered.send_keys(lname)\n            print('SUCCESS: Last name is entered')\n        except:\n            print(\"FAILED: Last name could not be entered\")\n            raise Exception\n    \n        try:\n            emailToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"email\"]')))\n            emailToBeEntered.send_keys(email)\n            print('SUCCESS: Email is entered')\n        except:\n            print(\"FAILED: Email could not be entered\")\n            raise Exception\n    \n        try:\n            phnoToBeEntered=wait.until(EC.element_to_be_clickable((By.ID,'signup-phone')))\n            phnoToBeEntered.click()\n            clearTextField()\n            phnoToBeEntered.send_keys(phone_no)\n            print('SUCCESS: Phone number is entered')\n        except:\n            print(\"FAILED: Phone number could not be entered\")\n            raise Exception\n    \n        try:\n            agreeTermsAndPrivacy=wait.until(EC.visibility_of_element_located((By.CLASS_NAME,'check-label')))\n            agreeTermsAndPrivacy.click()\n            print(\"SUCCESS: To agree to AKRU's terms and privacy policy Checkbox clicked\")\n        except:\n            print(\"FAILED: To agree to AKRU's terms and privacy policy Checkbox could not be clicked\")\n            raise Exception\n    \n        try:\n            agreeAndContinueToSendSignupEmail=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[@class=\"primary-btn mr-1 \"]')))\n            agreeAndContinueToSendSignupEmail.click()\n            print('SUCCESS: Agree & Continue button clicked')\n        except:\n            print(\"FAILED: Could not click Agree & Continue button\")\n            raise Exception\n    \n        time.sleep(15)\n    \n        try:\n            modalWhenEmailisSent=wait.until(EC.visibility_of_element_located((By.XPATH,'//h5[@class=\"title\"]')))\n            print(\"SUCCESS: 'Verify Your Email' modal appeared\")\n        except:\n            print(\"FAILED: 'Verify Your Email' modal could not be appeared\")\n            raise Exception\n    \n        def emailLogin():\n            self.driver.execute_script(\"window.open('http://www.yopmail.com', 'new window')\")\n            self.driver.switch_to.window(self.driver.window_handles[1])\n            print('SUCCESS: Switched to YOPMAIL tab')\n    \n            try:\n                time.sleep(3)\n                search = wait.until(EC.element_to_be_clickable((By.ID,\"login\")))\n                search.clear()\n                search.send_keys(email)\n                search.send_keys(Keys.RETURN)\n                print('SUCCESS: Email entered in YOPMAIL input field')\n            except:\n                print('FAILED: Email could not be entered in YOPMAIL input field')\n                raise Exception\n    \n            time.sleep(3)\n            self.driver.refresh()\n            time.sleep(5)\n    \n            try:\n                self.driver.switch_to.frame('ifmail')\n            except:\n                print(\"FAILED: Could not switch to iframe in YOPMAIL.\")\n                raise Exception\n    \n            try:\n                time.sleep(3)\n                LoginEmailButton=wait.until(EC.element_to_be_clickable((By.XPATH,'//b[text()=\"Verify Email\"]')))\n                LoginEmailButton.click()\n                print('SUCCESS: \"Verfy Email\" button clicked from YOPMAIL')\n            except:\n                print('FAILED: Could not click \"Verify Email\" button. Possibly due to captcha.')\n                raise Exception\n    \n>       emailLogin()\n\nFront-user/SIGNUPS/Individual_Signup.py:191: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def emailLogin():\n        self.driver.execute_script(\"window.open('http://www.yopmail.com', 'new window')\")\n        self.driver.switch_to.window(self.driver.window_handles[1])\n        print('SUCCESS: Switched to YOPMAIL tab')\n    \n        try:\n            time.sleep(3)\n            search = wait.until(EC.element_to_be_clickable((By.ID,\"login\")))\n            search.clear()\n            search.send_keys(email)\n            search.send_keys(Keys.RETURN)\n            print('SUCCESS: Email entered in YOPMAIL input field')\n        except:\n            print('FAILED: Email could not be entered in YOPMAIL input field')\n>           raise Exception\nE           Exception\n\nFront-user/SIGNUPS/Individual_Signup.py:170: Exception"}, "attachments": [{"name": "screenshot", "source": "3a886bb8-2029-4b9c-9dae-640fb2a05b61-attachment.png", "type": "image/png"}, {"name": "log", "source": "dadd7ec7-20ff-45ad-82ee-e3b44fad6c58-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "f92c66f9-80e5-40e3-9ce2-2429ca050b88-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "32c34f4b-44ee-42aa-bbb4-340e2e324af8-attachment.txt", "type": "text/plain"}], "start": 1657732424530, "stop": 1657732554113, "uuid": "3fa5c4f8-4c3b-46ef-ad9d-14fe986cecd9", "historyId": "94b746196c0b253348973d7017faa128", "testCaseId": "2311e8a638fbd4f779bfe73e02ba071c", "fullName": "Front-user.SIGNUPS.Individual_Signup.PythonOrgSearch#test_search_in_python_org", "labels": [{"name": "parentSuite", "value": "Front-user.SIGNUPS"}, {"name": "suite", "value": "Individual_Signup"}, {"name": "subSuite", "value": "PythonOrgSearch"}, {"name": "host", "value": "Asads-MacBook-Pro.local"}, {"name": "thread", "value": "13230-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Front-user.SIGNUPS.Individual_Signup"}]}