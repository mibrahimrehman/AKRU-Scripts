{"name": "test_search_in_python_org_login", "status": "broken", "statusDetails": {"message": "Exception", "trace": "self = <yopmail_login.yopmail object at 0x1103a2ce0>\n\n    def run(self):\n        driver = self.driver\n        wait = WebDriverWait(self.driver, 120)\n    \n        driver.execute_script(\"window.open('http://www.yopmail.com', 'new window')\")\n        driver.switch_to.window(self.driver.window_handles[1])\n    \n    \n    \n        # try:\n        #     email_text = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,  \"#login\")))\n        #     email_text.click()\n        #     print('SUCCESS:Email Text feild clicked')\n        # except:\n        #     print(\"FAILED:Email Text feild could not be clicked\")\n        #     raise Exception\n    \n    \n        try:\n            login = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,\"#login\")))\n            login.click()\n    \n            login.clear()\n    \n            login.send_keys(variables.login_email)\n            login.send_keys(Keys.ENTER)\n            print('SUCCESS: Email entered successfully')\n    \n        except:\n            print(\"FAILED:Email could not be entered\")\n            raise Exception\n    \n        time.sleep(3)\n        driver.refresh()\n        time.sleep(5)\n    \n        try:\n                driver.switch_to.frame('ifmail')\n                print('SUCCESS: Switched to YOPMAIL iframe')\n        except:\n                print(\"FAILED: Could not switch to iframe in YOPMAIL.\")\n                raise Exception\n    \n        try:\n                time.sleep(3)\n>               LoginEmailButton=wait.until(EC.element_to_be_clickable((By.XPATH,'//strong[text()=\"Log in to Akru TestNet\"]')))\n\nyopmail_login.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4d7725e4f46503a9e0bd131ab00e6570\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x1106f53f0>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4d7725e4f46503a9e0bd131ab00e6570\")>\n\n    def _predicate(driver):\n        target = mark\n        if not isinstance(target, WebElement):  # if given locator instead of WebElement\n>           target = driver.find_element(*target)  # grab element at locator\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/support/expected_conditions.py:312: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4d7725e4f46503a9e0bd131ab00e6570\")>\nby = 'xpath', value = '//strong[text()=\"Log in to Akru TestNet\"]'\n\n    def find_element(self, by=By.ID, value=None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:857: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4d7725e4f46503a9e0bd131ab00e6570\")>\ndriver_command = 'findElement'\nparams = {'using': 'xpath', 'value': '//strong[text()=\"Log in to Akru TestNet\"]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1103426b0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: window was already closed\\\\n  ...fff6bc0f109 _pthread_start + 148\\\\n20  libsystem_pthread.dylib             0x00007fff6bc0ab8b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: window was already closed\nE         (Session info: chrome=103.0.5060.134)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010cd5aef9 chromedriver + 4480761\nE       1   chromedriver                        0x000000010cce65d3 chromedriver + 4003283\nE       2   chromedriver                        0x000000010c979338 chromedriver + 410424\nE       3   chromedriver                        0x000000010c96980f chromedriver + 346127\nE       4   chromedriver                        0x000000010c96acb2 chromedriver + 351410\nE       5   chromedriver                        0x000000010c9634dc chromedriver + 320732\nE       6   chromedriver                        0x000000010c97a752 chromedriver + 415570\nE       7   chromedriver                        0x000000010c9debab chromedriver + 826283\nE       8   chromedriver                        0x000000010c9cc953 chromedriver + 751955\nE       9   chromedriver                        0x000000010c9a2cd5 chromedriver + 580821\nE       10  chromedriver                        0x000000010c9a3d25 chromedriver + 584997\nE       11  chromedriver                        0x000000010cd2c02d chromedriver + 4288557\nE       12  chromedriver                        0x000000010cd311b3 chromedriver + 4309427\nE       13  chromedriver                        0x000000010cd3623f chromedriver + 4330047\nE       14  chromedriver                        0x000000010cd31dfa chromedriver + 4312570\nE       15  chromedriver                        0x000000010cd0afef chromedriver + 4153327\nE       16  chromedriver                        0x000000010cd4bd78 chromedriver + 4418936\nE       17  chromedriver                        0x000000010cd4beff chromedriver + 4419327\nE       18  chromedriver                        0x000000010cd62ab5 chromedriver + 4512437\nE       19  libsystem_pthread.dylib             0x00007fff6bc0f109 _pthread_start + 148\nE       20  libsystem_pthread.dylib             0x00007fff6bc0ab8b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Login.Test_login testMethod=test_search_in_python_org_login>\n\n    def test_search_in_python_org_login(self):\n        print(\"Now i am in login\")\n        driver = self.driver\n        driver.maximize_window()\n        url = variables.url\n    \n        action = ActionChains (driver)\n        def clearTextField():\n            action.key_down(Keys.COMMAND).perform()\n            action.send_keys('a').perform()\n            action.key_up(Keys.COMMAND).perform()\n            action.send_keys(Keys.BACK_SPACE).perform()\n    \n    \n        self.driver.get(url)\n        print('SUCCESS: \"'+url+'\" saved in webdriver')\n        wait = WebDriverWait(self.driver, 120)\n    \n        time.sleep(3)\n        try:\n            loginButton=wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,\"#navbar-header-sticky-login\")))\n            loginButton.click()\n            print('SUCCESS: Get Started button clicked')\n        except:\n            print(\"FAILED: Get Started button could not be clicked\")\n            raise Exception\n    \n        try:\n            tenant_portal = wait.until(EC.element_to_be_clickable((By.XPATH,     \"//button[. = 'Tenant portal']\")))\n            tenant_portal.click()\n            print('SUCCESS: Tenant portal option clicked')\n        except:\n            print(\"FAILED: Tenant portal option could not be clicked\")\n            raise Exception\n    \n        def cookiesHandle():\n            try:\n                time.sleep(3)\n                cookiesClickerFound=wait.until(EC.element_to_be_clickable((By.XPATH,\"//div[@class='d-flex justify-content-end']/button[3]\")))\n                cookiesClickerFound.click()\n                print('SUCCESS: \"Allow all cookies\" button clicked')\n            except:\n                print('FAILED: \"Allow all cookies\" button could not be clicked')\n                raise Exception\n        cookiesHandle()\n    \n        try:\n            mo = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,  \"#navbar-select-magic\")))\n            mo.click()\n            print('SUCCESS: Email option from modale clicked')\n        except:\n            print(\"FAILED: Email option from modale could not be clicked\")\n            raise Exception\n    \n    \n        try:\n            emailbox = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,  \"#navbar-magic-email\")))\n            emailbox.click()\n            print('SUCCESS: email box clicked')\n        except:\n            print(\"FAILED: email box could not be clicked\")\n            raise Exception\n    \n        try:\n            email = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, \"#navbar-magic-email\")))\n            email.click()\n            clearTextField()\n            email.send_keys(variables.login_email)\n            print('SUCCESS: email entered successfully')\n        except:\n            print(\"FAILED: email could not be entered\")\n            raise Exception\n    \n        try:\n            next_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,  \"#navbar-magic-next\")))\n            next_button.click()\n            print('SUCCESS:Next button clicked')\n        except:\n            print(\"FAILED:Next button could not be clicked\")\n            raise Exception\n    \n        try:\n            if(wait.until(EC.visibility_of_element_located(By.CLASS_NAME , 'loader-overlay'))):\n                print(\"SUCCESS: Loader found\")\n                loaderremove = wait.until(EC.invisibility_of_element_located((By.CLASS_NAME, 'loader-overlay')))\n                print(\"SUCCESS: Loader disappeared successfully\")\n            else:\n                print(\"FAILED: loader did not disappeared or still loading\")\n    \n        except:\n            print(\"FAILED: Loader did not open\")\n    \n    \n        # Login from yopmail\n        ym = yopmail(driver)\n>       ym.run()\n\nLogin.py:149: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <yopmail_login.yopmail object at 0x1103a2ce0>\n\n    def run(self):\n        driver = self.driver\n        wait = WebDriverWait(self.driver, 120)\n    \n        driver.execute_script(\"window.open('http://www.yopmail.com', 'new window')\")\n        driver.switch_to.window(self.driver.window_handles[1])\n    \n    \n    \n        # try:\n        #     email_text = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,  \"#login\")))\n        #     email_text.click()\n        #     print('SUCCESS:Email Text feild clicked')\n        # except:\n        #     print(\"FAILED:Email Text feild could not be clicked\")\n        #     raise Exception\n    \n    \n        try:\n            login = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,\"#login\")))\n            login.click()\n    \n            login.clear()\n    \n            login.send_keys(variables.login_email)\n            login.send_keys(Keys.ENTER)\n            print('SUCCESS: Email entered successfully')\n    \n        except:\n            print(\"FAILED:Email could not be entered\")\n            raise Exception\n    \n        time.sleep(3)\n        driver.refresh()\n        time.sleep(5)\n    \n        try:\n                driver.switch_to.frame('ifmail')\n                print('SUCCESS: Switched to YOPMAIL iframe')\n        except:\n                print(\"FAILED: Could not switch to iframe in YOPMAIL.\")\n                raise Exception\n    \n        try:\n                time.sleep(3)\n                LoginEmailButton=wait.until(EC.element_to_be_clickable((By.XPATH,'//strong[text()=\"Log in to Akru TestNet\"]')))\n                LoginEmailButton.click()\n                print('SUCCESS: \"Log in to Akru TestNet\" button clicked from YOPMAIL')\n        except:\n                print('FAILED: Could not find \"Log in to Akru TestNet\" button.')\n>               raise Exception\nE               Exception\n\nyopmail_login.py:76: Exception"}, "attachments": [{"name": "stdout", "source": "2c0f06e0-3927-4c2c-92a7-0486b8898fa8-attachment.txt", "type": "text/plain"}], "start": 1659504735288, "stop": 1659504854211, "uuid": "02cabc8d-176d-42e1-ae8b-2be67abbfd95", "historyId": "8f064bbf118011d8d15a7d75731de0e2", "testCaseId": "662b4c380b2e1238916778e680f5b450", "fullName": "Login.Test_login#test_search_in_python_org_login", "labels": [{"name": "suite", "value": "Login"}, {"name": "subSuite", "value": "Test_login"}, {"name": "host", "value": "Asads-MacBook-Pro.local"}, {"name": "thread", "value": "40324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Login"}]}