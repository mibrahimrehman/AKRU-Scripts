{"name": "test_search_in_python_org", "status": "broken", "statusDetails": {"message": "Exception", "trace": "self = <Login.PythonOrgSearch testMethod=test_search_in_python_org>\n\n    def test_search_in_python_org(self):\n        self.driver.maximize_window()\n        url = \"https://avaxdev.akru.co\"\n        afterLoginURL = 'https://avaxdev.akru.co/dashboard'\n        email = \"ib_automation_seller@yopmail.com\"\n        wait = WebDriverWait(self.driver, 50)\n    \n        #comment change\n        #new comment\n        self.driver.get(url)\n        print('SUCCESS: \"'+url+'\" saved in webdriver')\n    \n        time.sleep(3)\n        try:\n            loginButton=wait.until(EC.element_to_be_clickable((By.ID,\"navbar-header-sticky-login\")))\n            loginButton.click()\n            print('SUCCESS: Login button clicked')\n        except:\n            print(\"FAILED: Login button could not be clicked\")\n            raise Exception\n    \n        try:\n            userPortalButton=wait.until(EC.element_to_be_clickable((By.XPATH,\"//a[text()='User portal']\")))\n            userPortalButton.click()\n            print('SUCCESS: User Portal button clicked')\n        except:\n            print(\"FAILED: User Portal button could not be clicked\")\n            raise Exception\n    \n        def cookiesHandle():\n            try:\n                time.sleep(3)\n                cookiesClickerFound=wait.until(EC.element_to_be_clickable((By.XPATH,\"//div[@class='d-flex justify-content-end']/button[3]\")))\n                cookiesClickerFound.click()\n                print('SUCCESS: \"Allow all cookies\" button clicked')\n            except:\n                print('FAILED: \"Allow all cookies\" button could not be clicked')\n                raise Exception\n        cookiesHandle()\n    \n        time.sleep(3)\n        MagicModalButtonFound= wait.until(EC.element_to_be_clickable((By.ID,\"navbar-select-magic\")))\n        if MagicModalButtonFound:\n            MagicModalButtonFound.click()\n            print('SUCCESS: Magic button clicked')\n        else:\n            print(\"FAILED: Magic button could not be clicked\")\n            raise Exception\n    \n        time.sleep(3)\n        emailBox= wait.until(EC.element_to_be_clickable((By.ID, 'navbar-magic-email')))\n        if emailBox:\n            emailBox.send_keys(email)\n            print('SUCCESS: Email entered in magic modal')\n        else:\n            print('FAILED: Email could not be entered in magic modal')\n            raise Exception\n    \n        time.sleep(3)\n        magicNextButton = wait.until(EC.visibility_of_element_located((By.ID, \"navbar-magic-next\")))\n        if magicNextButton:\n            magicNextButton.click()\n            print('SUCCESS: Magic next button clicked')\n        else:\n            print('FAILED: Magic next button could not be clicked')\n            raise Exception\n    \n        def emailLogin():\n            self.driver.execute_script(\"window.open('http://www.yopmail.com', 'new window')\")\n            self.driver.switch_to.window(self.driver.window_handles[1])\n            print('SUCCESS: Switched to YOPMAIL tab')\n    \n            try:\n                time.sleep(3)\n                search = wait.until(EC.element_to_be_clickable((By.ID,\"login\")))\n                search.clear()\n                search.send_keys(email)\n                search.send_keys(Keys.RETURN)\n                print('SUCCESS: Email entered in YOPMAIL input field')\n            except:\n                print('FAILED: Email could not be entered in YOPMAIL input field')\n                raise Exception\n    \n            time.sleep(3)\n            self.driver.refresh()\n            time.sleep(5)\n    \n            try:\n                self.driver.switch_to.frame('ifmail')\n                print('SUCCESS: Switched to YOPMAIL iframe')\n            except:\n                print(\"FAILED: Could not switch to iframe in YOPMAIL.\")\n                raise Exception\n    \n            try:\n                time.sleep(3)\n                LoginEmailButton=wait.until(EC.element_to_be_clickable((By.XPATH,'//strong[text()=\"Log in to Akru TestNet\"]')))\n                LoginEmailButton.click()\n                print('SUCCESS: \"Log in to Akru TestNet\" button clicked from YOPMAIL')\n            except:\n                print('FAILED: Could not find \"Log in to Akru TestNet\" button.')\n                raise Exception\n    \n        emailLogin()\n    \n        time.sleep(10)\n        self.driver.close()\n        self.driver.switch_to.window(self.driver.window_handles[1])\n        self.driver.close()\n        self.driver.switch_to.window(self.driver.window_handles[0])\n        time.sleep(10)\n    \n        try:\n            time.sleep(5)\n            loader = wait.until(EC.invisibility_of_element_located((By.CLASS_NAME, 'loader-overlay')))\n            time.sleep(3)\n            print('SUCCESS: Loader Disappeared')\n        except:\n            print('FAILED: Loader did not appear or still loading')\n    \n        try:\n            LoginToasterMessage = wait.until(EC.presence_of_element_located((By.CLASS_NAME, 'Toastify__toast-body')))\n            print('SUCCESS: Toaster Appeared')\n        except:\n            print('FAILED: Toaster could not be appeared')\n    \n        if self.driver.current_url == afterLoginURL:\n            print('\\nSUCCESS: SUCCESSFULLY LOGGED IN. New URL is '+ afterLoginURL)\n        else:\n            print('\\nFAILED: Could not login. As dashboard did not appear.\\n')\n            # print('\\nFAILED: Success toaster could not be appeared. Instead toaster with the text: \"'+LoginToasterMessage.text+'\" appeared\\n')\n>           raise Exception\nE           Exception\n\nLogin.py:166: Exception"}, "attachments": [{"name": "screenshot", "source": "3a159d79-8bd6-47c3-9e29-74487aa590c6-attachment.png", "type": "image/png"}, {"name": "log", "source": "56560ab1-862f-46f7-8945-05f256d6b1e6-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "339dde73-e64d-4917-9407-75b281fa1f4b-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "9e98a9fb-4a15-459e-bd14-67f9eea90c0e-attachment.txt", "type": "text/plain"}], "start": 1658732431528, "stop": 1658732741051, "uuid": "1196444c-295e-4f48-bc3f-2d80dc8a58d3", "historyId": "48bf821c8320e420bf4c19ab089c2069", "testCaseId": "dc1d8e8659b563d0c67dd59beb86f70f", "fullName": "Login.PythonOrgSearch#test_search_in_python_org", "labels": [{"name": "suite", "value": "Login"}, {"name": "subSuite", "value": "PythonOrgSearch"}, {"name": "host", "value": "Asads-MacBook-Pro.local"}, {"name": "thread", "value": "69921-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Login"}]}