{"name": "test_search_in_python_org", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: window was already closed\n  (Session info: chrome=103.0.5060.134)\nStacktrace:\n0   chromedriver                        0x000000010e69def9 chromedriver + 4480761\n1   chromedriver                        0x000000010e6295d3 chromedriver + 4003283\n2   chromedriver                        0x000000010e2bc338 chromedriver + 410424\n3   chromedriver                        0x000000010e2ac80f chromedriver + 346127\n4   chromedriver                        0x000000010e2adcb2 chromedriver + 351410\n5   chromedriver                        0x000000010e2a64dc chromedriver + 320732\n6   chromedriver                        0x000000010e2bd752 chromedriver + 415570\n7   chromedriver                        0x000000010e321bab chromedriver + 826283\n8   chromedriver                        0x000000010e30f953 chromedriver + 751955\n9   chromedriver                        0x000000010e2e5cd5 chromedriver + 580821\n10  chromedriver                        0x000000010e2e6d25 chromedriver + 584997\n11  chromedriver                        0x000000010e66f02d chromedriver + 4288557\n12  chromedriver                        0x000000010e6741b3 chromedriver + 4309427\n13  chromedriver                        0x000000010e67923f chromedriver + 4330047\n14  chromedriver                        0x000000010e674dfa chromedriver + 4312570\n15  chromedriver                        0x000000010e64dfef chromedriver + 4153327\n16  chromedriver                        0x000000010e68ed78 chromedriver + 4418936\n17  chromedriver                        0x000000010e68eeff chromedriver + 4419327\n18  chromedriver                        0x000000010e6a5ab5 chromedriver + 4512437\n19  libsystem_pthread.dylib             0x00007fff72470109 _pthread_start + 148\n20  libsystem_pthread.dylib             0x00007fff7246bb8b thread_start + 15", "trace": "self = <List_Tokens.PythonOrgSearch testMethod=test_search_in_python_org>\n\n    def test_search_in_python_org(self):\n        self.driver.maximize_window()\n        actions = ActionChains(self.driver)\n        url = \"https://avaxdev.akru.co\"\n        afterLoginURL = 'https://avaxdev.akru.co/dashboard'\n        email = \"ib_automation_seller@yopmail.com\"\n        TokenSymbol = 'AK-EX03'\n        PriceOfTokensToBeListedd = \"1200\"\n        QuantityOfTokensToBeListedd = \"1\"\n        wait = WebDriverWait(self.driver, 100)\n        #comment\n    \n        self.driver.get(url)\n        print('SUCCESS: \"'+url+'\" saved in webdriver')\n    \n        time.sleep(3)\n>       loginButton=wait.until(EC.element_to_be_clickable((By.ID,\"navbar-header-sticky-login\")))\n\nList_Tokens.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:81: in until\n    value = method(self._driver)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/support/expected_conditions.py:312: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:857: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x104b5af80>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: window was already closed\\\\n  ...fff72470109 _pthread_start + 148\\\\n20  libsystem_pthread.dylib             0x00007fff7246bb8b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: window was already closed\nE         (Session info: chrome=103.0.5060.134)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010e69def9 chromedriver + 4480761\nE       1   chromedriver                        0x000000010e6295d3 chromedriver + 4003283\nE       2   chromedriver                        0x000000010e2bc338 chromedriver + 410424\nE       3   chromedriver                        0x000000010e2ac80f chromedriver + 346127\nE       4   chromedriver                        0x000000010e2adcb2 chromedriver + 351410\nE       5   chromedriver                        0x000000010e2a64dc chromedriver + 320732\nE       6   chromedriver                        0x000000010e2bd752 chromedriver + 415570\nE       7   chromedriver                        0x000000010e321bab chromedriver + 826283\nE       8   chromedriver                        0x000000010e30f953 chromedriver + 751955\nE       9   chromedriver                        0x000000010e2e5cd5 chromedriver + 580821\nE       10  chromedriver                        0x000000010e2e6d25 chromedriver + 584997\nE       11  chromedriver                        0x000000010e66f02d chromedriver + 4288557\nE       12  chromedriver                        0x000000010e6741b3 chromedriver + 4309427\nE       13  chromedriver                        0x000000010e67923f chromedriver + 4330047\nE       14  chromedriver                        0x000000010e674dfa chromedriver + 4312570\nE       15  chromedriver                        0x000000010e64dfef chromedriver + 4153327\nE       16  chromedriver                        0x000000010e68ed78 chromedriver + 4418936\nE       17  chromedriver                        0x000000010e68eeff chromedriver + 4419327\nE       18  chromedriver                        0x000000010e6a5ab5 chromedriver + 4512437\nE       19  libsystem_pthread.dylib             0x00007fff72470109 _pthread_start + 148\nE       20  libsystem_pthread.dylib             0x00007fff7246bb8b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "650e58f2-49ef-406f-9f91-c3537494d36b-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "d52a164e-9312-4def-9acf-d5200a851ef5-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "9c1b10a3-0f56-4adf-a134-a61922c081d9-attachment.txt", "type": "text/plain"}], "start": 1658748979725, "stop": 1658749036996, "uuid": "d7431924-a354-40d6-b5f1-e159a45cb9fb", "historyId": "81e992b828ebca2a33c0d6adffb9f777", "testCaseId": "929a87b34f1a7a132f73aa967c927505", "fullName": "List_Tokens.PythonOrgSearch#test_search_in_python_org", "labels": [{"name": "suite", "value": "List_Tokens"}, {"name": "subSuite", "value": "PythonOrgSearch"}, {"name": "host", "value": "Asads-MacBook-Pro.local"}, {"name": "thread", "value": "75838-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "List_Tokens"}]}