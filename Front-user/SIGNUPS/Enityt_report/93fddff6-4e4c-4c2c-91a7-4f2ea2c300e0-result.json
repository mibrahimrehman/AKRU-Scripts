{"name": "test_search_in_python_org", "status": "broken", "statusDetails": {"message": "Exception", "trace": "self = <Individual_Signup.PythonOrgSearch testMethod=test_search_in_python_org>\n\n    def test_search_in_python_org(self):\n        self.driver.maximize_window()\n        url = \"https://avaxdev.akru.co\"\n        fname = names.get_first_name()\n        lname = names.get_last_name()\n        email = fname + lname + '123@yopmail.com'\n        phone_no = '5678956789'\n    \n        action = ActionChains (self.driver)\n        def clearTextField():\n            action.key_down(Keys.COMMAND).perform()\n            action.send_keys('a').perform()\n            action.key_up(Keys.COMMAND).perform()\n            action.send_keys(Keys.BACK_SPACE).perform()\n    \n        self.driver.get(url)\n        print('SUCCESS: \"'+url+'\" saved in webdriver')\n        wait = WebDriverWait(self.driver, 120)\n    \n        time.sleep(3)\n        try:\n>           loginButton=wait.until(EC.element_to_be_clickable((By.ID,\"navbar-header-sticky-starter\")))\n\nIndividual_Signup.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"640f39541a325860f3de675c2811e930\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x10ccde950>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"640f39541a325860f3de675c2811e930\")>\n\n    def _predicate(driver):\n        target = mark\n        if not isinstance(target, WebElement):  # if given locator instead of WebElement\n>           target = driver.find_element(*target)  # grab element at locator\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/support/expected_conditions.py:312: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"640f39541a325860f3de675c2811e930\")>\nby = 'css selector', value = '[id=\"navbar-header-sticky-starter\"]'\n\n    def find_element(self, by=By.ID, value=None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:857: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"640f39541a325860f3de675c2811e930\")>\ndriver_command = 'findElement'\nparams = {'using': 'css selector', 'value': '[id=\"navbar-header-sticky-starter\"]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:435: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10c8ebbb0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...fff72470109 _pthread_start + 148\\\\n18  libsystem_pthread.dylib             0x00007fff7246bb8b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=103.0.5060.114)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104743ef9 chromedriver + 4480761\nE       1   chromedriver                        0x00000001046cf5d3 chromedriver + 4003283\nE       2   chromedriver                        0x0000000104362338 chromedriver + 410424\nE       3   chromedriver                        0x0000000104343788 chromedriver + 284552\nE       4   chromedriver                        0x00000001043b8f7b chromedriver + 765819\nE       5   chromedriver                        0x00000001043c7b5f chromedriver + 826207\nE       6   chromedriver                        0x00000001043b5953 chromedriver + 751955\nE       7   chromedriver                        0x000000010438bcd5 chromedriver + 580821\nE       8   chromedriver                        0x000000010438cd25 chromedriver + 584997\nE       9   chromedriver                        0x000000010471502d chromedriver + 4288557\nE       10  chromedriver                        0x000000010471a1b3 chromedriver + 4309427\nE       11  chromedriver                        0x000000010471f23f chromedriver + 4330047\nE       12  chromedriver                        0x000000010471adfa chromedriver + 4312570\nE       13  chromedriver                        0x00000001046f3fef chromedriver + 4153327\nE       14  chromedriver                        0x0000000104734d78 chromedriver + 4418936\nE       15  chromedriver                        0x0000000104734eff chromedriver + 4419327\nE       16  chromedriver                        0x000000010474bab5 chromedriver + 4512437\nE       17  libsystem_pthread.dylib             0x00007fff72470109 _pthread_start + 148\nE       18  libsystem_pthread.dylib             0x00007fff7246bb8b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Individual_Signup.PythonOrgSearch testMethod=test_search_in_python_org>\n\n    def test_search_in_python_org(self):\n        self.driver.maximize_window()\n        url = \"https://avaxdev.akru.co\"\n        fname = names.get_first_name()\n        lname = names.get_last_name()\n        email = fname + lname + '123@yopmail.com'\n        phone_no = '5678956789'\n    \n        action = ActionChains (self.driver)\n        def clearTextField():\n            action.key_down(Keys.COMMAND).perform()\n            action.send_keys('a').perform()\n            action.key_up(Keys.COMMAND).perform()\n            action.send_keys(Keys.BACK_SPACE).perform()\n    \n        self.driver.get(url)\n        print('SUCCESS: \"'+url+'\" saved in webdriver')\n        wait = WebDriverWait(self.driver, 120)\n    \n        time.sleep(3)\n        try:\n            loginButton=wait.until(EC.element_to_be_clickable((By.ID,\"navbar-header-sticky-starter\")))\n            loginButton.click()\n            print('SUCCESS: Get Started button clicked')\n        except:\n            print(\"FAILED: Get Started button could not be clicked\")\n>           raise Exception\nE           Exception\n\nIndividual_Signup.py:64: Exception"}, "attachments": [{"name": "log", "source": "9bcfafeb-94f5-42a2-b7a8-95a6b87bf3f1-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "221b7615-6ade-492f-87ba-753384784c0e-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "96cc366c-d55d-4830-a091-c54b6e14efa6-attachment.txt", "type": "text/plain"}], "start": 1658404111442, "stop": 1658404126282, "uuid": "60851243-4fc6-40a3-b137-796234e6e04a", "historyId": "f76462cc2e004c6315b56955e1452f05", "testCaseId": "602b32296cbde06027dbf8ebc14ffbf1", "fullName": "Individual_Signup.PythonOrgSearch#test_search_in_python_org", "labels": [{"name": "suite", "value": "Individual_Signup"}, {"name": "subSuite", "value": "PythonOrgSearch"}, {"name": "host", "value": "Asads-MacBook-Pro.local"}, {"name": "thread", "value": "44134-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Individual_Signup"}]}