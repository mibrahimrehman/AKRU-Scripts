{"name": "test_search_in_python_org", "status": "broken", "statusDetails": {"message": "Exception", "trace": "self = <Entity_Signup.PythonOrgSearch testMethod=test_search_in_python_org>\n\n    def test_search_in_python_org(self):\n        self.driver.maximize_window()\n        url = \"https://avaxdev.akru.co\"\n        fname = names.get_first_name()\n        lname = names.get_last_name()\n        email = fname + lname + '123@yopmail.com'\n        phone_no = '5678956789'\n        fnameRep = names.get_first_name()\n        lnameRep = names.get_last_name()\n        emailRep = fnameRep+lnameRep+'123@yopmail.com'\n    \n        action = ActionChains (self.driver)\n        def clearTextField():\n            action.key_down(Keys.COMMAND).perform()\n            action.send_keys('a').perform()\n            action.key_up(Keys.COMMAND).perform()\n            action.send_keys(Keys.BACK_SPACE).perform()\n    \n    \n        self.driver.get(url)\n        print('SUCCESS: \"'+url+'\" saved in webdriver')\n        wait = WebDriverWait(self.driver, 50)\n    \n        time.sleep(3)\n        try:\n            loginButton=wait.until(EC.element_to_be_clickable((By.ID,\"navbar-header-sticky-starter\")))\n            loginButton.click()\n            print('SUCCESS: Get Started button clicked')\n        except:\n            print(\"FAILED: Get Started button could not be clicked\")\n            raise Exception\n    \n        try:\n            yesAccreditedInvestor=wait.until(EC.visibility_of_element_located((By.CLASS_NAME,'check-label')))\n            yesAccreditedInvestor.click()\n            print('SUCCESS: Yes selected for \"Are you an accredited investor?\"')\n        except:\n            print('FAILED: Yes could not be selected for \"Are you an accredited investor?\"')\n            raise Exception\n    \n        try:\n            continueAccreditedInvestor=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[@class=\"primary-btn\"][text()=\"Continue\"]')))\n            continueAccreditedInvestor.click()\n            print('SUCCESS: Continue button clicked for \"Are you an accredited investor?\"')\n        except:\n            print('FAILED: Continue button could not be clicked for \"Are you an accredited investor?\"')\n            raise Exception\n    \n        try:\n            starterPackageSelect=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[text()=\"Select this plan\"]')))\n            starterPackageSelect.click()\n            print('SUCCESS: Select this plan button is clicked for starter packages')\n        except:\n            print(\"FAILED: Select this plan button could not be clicked for starter packages\")\n            raise Exception\n    \n        try:\n            investmentPlanSelect=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[text()=\"Select this plan\"]')))\n            investmentPlanSelect.click()\n            print('SUCCESS: Select this plan button is clicked for investment plans')\n        except:\n            print(\"FAILED: Select this plan button could not be clicked for investment plans\")\n            raise Exception\n    \n        try:\n            fnameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"firstName\"]')))\n            fnameToBeEntered.send_keys(fname)\n            print('SUCCESS: First name is entered')\n        except:\n            print(\"FAILED: First name could not be entered\")\n            raise Exception\n    \n        try:\n            lnameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"lastName\"]')))\n            lnameToBeEntered.send_keys(lname)\n            print('SUCCESS: Last name is entered')\n        except:\n            print(\"FAILED: Last name could not be entered\")\n            raise Exception\n    \n    \n        try:\n            emailToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"email\"]')))\n            emailToBeEntered.send_keys(email)\n            print('SUCCESS: Email is entered')\n        except:\n            print(\"FAILED: Email could not be entered\")\n            raise Exception\n    \n        try:\n            phnoToBeEntered=wait.until(EC.element_to_be_clickable((By.ID,'signup-phone')))\n            phnoToBeEntered.click()\n            clearTextField()\n            phnoToBeEntered.send_keys(phone_no)\n            print('SUCCESS: Phone number is entered')\n        except:\n            print(\"FAILED: Phone number could not be entered\")\n            raise Exception\n    \n        try:\n            agreeTermsAndPrivacy=wait.until(EC.visibility_of_element_located((By.CLASS_NAME,'check-label')))\n            agreeTermsAndPrivacy.click()\n            print(\"SUCCESS: To agree to AKRU's terms and privacy policy Checkbox clicked\")\n        except:\n            print(\"FAILED: To agree to AKRU's terms and privacy policy Checkbox could not be clicked\")\n            raise Exception\n    \n        try:\n            selectingEntityRadioButton=wait.until(EC.visibility_of_element_located((By.XPATH,'//span[text()=\"Entity\"]')))\n            selectingEntityRadioButton.click()\n            print('SUCCESS: Entity Radio Button is clicked')\n        except:\n            print(\"FAILED: Entity Radio Button could not be clicked\")\n            raise Exception\n    \n        try:\n            agreeAndContinueToSendSignupEmail=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[@class=\"primary-btn mr-1 \"]')))\n            agreeAndContinueToSendSignupEmail.click()\n            print('SUCCESS: Agree & Continue button clicked')\n        except:\n            print(\"FAILED: Could not click Agree & Continue button\")\n            raise Exception\n    \n        try:\n            modalWhenEmailisSent=wait.until(EC.visibility_of_element_located((By.XPATH,'//h5[@class=\"title\"]')))\n            print(\"SUCCESS: 'Verify Your Email' modal appeared\")\n        except:\n            print(\"FAILED: 'Verify Your Email' modal could not be appeared\")\n            raise Exception\n    \n        def emailLogin():\n            self.driver.execute_script(\"window.open('http://www.yopmail.com', 'new window')\")\n            self.driver.switch_to.window(self.driver.window_handles[1])\n            print('SUCCESS: Switched to YOPMAIL tab')\n    \n            try:\n                time.sleep(3)\n                search = wait.until(EC.element_to_be_clickable((By.ID,\"login\")))\n                search.clear()\n                search.send_keys(email)\n                search.send_keys(Keys.RETURN)\n                print('SUCCESS: Email entered in YOPMAIL input field')\n            except:\n                print('FAILED: Email could not be entered in YOPMAIL input field')\n                raise Exception\n    \n            time.sleep(3)\n            self.driver.refresh()\n            time.sleep(5)\n    \n            try:\n                self.driver.switch_to.frame('ifmail')\n            except:\n                print(\"FAILED: Could not switch to iframe in YOPMAIL.\")\n                raise Exception\n    \n            try:\n                time.sleep(3)\n                LoginEmailButton=wait.until(EC.element_to_be_clickable((By.XPATH,'//b[text()=\"Verify Email\"]')))\n                LoginEmailButton.click()\n                print('SUCCESS: \"Verfy Email\" button clicked from YOPMAIL')\n            except:\n                print('FAILED: Could not click \"Verify Email\" button. Possibly due to captcha.')\n                raise Exception\n    \n        emailLogin()\n    \n        time.sleep(10)\n        self.driver.switch_to.window(self.driver.window_handles[0])\n        self.driver.close()\n        self.driver.switch_to.window(self.driver.window_handles[0])\n        self.driver.close()\n        self.driver.switch_to.window(self.driver.window_handles[0])\n        time.sleep(1)\n    \n        try:\n            EntityNameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"name\"]')))\n            EntityNameToBeEntered.send_keys(fname+\"'s Entity\")\n            print('SUCCESS: Enity Name is entered')\n        except:\n            print(\"FAILED: Entity name could not be entered\")\n            raise Exception\n    \n        try:\n            entityTypeToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"subType\"]')))\n            entityTypeToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//select[@name=\"subType\"]//option[@value=\"C Corporation\"]'):\n                if option.text == 'C Corporation':\n                    option.click()\n                    break\n            print('SUCCESS: Entity type is selected from dropdown')\n        except:\n            print(\"FAILED: Entity Type could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            TaxClassificationToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"classification\"]')))\n            TaxClassificationToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//select[@name=\"classification\"]//option[@value=\"C Corporation\"]'):\n                if option.text == 'C Corporation':\n                    option.click()\n                    break\n            print('SUCCESS: Tax Classification selected from dropdown')\n        except:\n            print(\"FAILED: Tax Classification could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            IndustryToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"industry\"]')))\n            IndustryToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//select[@name=\"industry\"]//option[@value=\"Gourmet foods\"]'):\n                if option.text == 'Gourmet foods':\n                    option.click()\n                    break\n            print('SUCCESS: Industry selected from dropdown')\n        except:\n            print(\"FAILED: Industry could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            StateToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"juristdiction\"]')))\n            StateToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH,'//select[@name=\"juristdiction\"]//option[@value=\"Ohio\"]'):\n                if option.text == 'Ohio':\n                    option.click()\n                    break\n            print('SUCCESS: State selected from dropdown')\n        except:\n            print(\"FAILED: State could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            EINToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"einNumber\"]')))\n            EINToBeEntered.send_keys('123456789')\n            print('SUCCESS: EIN Number is entered')\n        except:\n            print(\"FAILED: EIN number could not be entered\")\n            raise Exception\n    \n        try:\n            CertificateOfFormationToBeUploaded=self.driver.find_element(By.XPATH, '//div[1]/input[@type=\"file\"]')\n            filepath = os.path.abspath(\"blank.pdf\")\n            CertificateOfFormationToBeUploaded.send_keys(filepath)\n            # CertificateOfFormationToBeUploaded.send_keys(\"/Users/qualityassurance/Desktop/automation-scripts/AVAXDEV_SHAHWAR/blank.pdf\")\n            print('SUCCESS: Certificate of Formation is uploaded')\n        except:\n            print(\"FAILED: Certificate of Formation could not be uploaded\")\n            raise Exception\n    \n        try:\n            OperatingAgreementToBeUploaded=self.driver.find_element(By.XPATH, '//div[2]/input[@type=\"file\"]')\n            OperatingAgreementToBeUploaded.send_keys(filepath)\n            # OperatingAgreementToBeUploaded.send_keys(\"/Users/qualityassurance/Desktop/automation-scripts/AVAXDEV_SHAHWAR/blank.pdf\")\n            print('SUCCESS: Operating Agreement is uploaded')\n        except:\n            print(\"FAILED: Operating Agreement could not be uploaded\")\n            raise Exception\n    \n        try:\n            BusinessIddocToBeUploaded=self.driver.find_element(By.XPATH, '//div[4]/input[@type=\"file\"]')\n            BusinessIddocToBeUploaded.send_keys(filepath)\n            # BusinessIddocToBeUploaded.send_keys(\"/Users/qualityassurance/Desktop/automation-scripts/AVAXDEV_SHAHWAR/blank.pdf\")\n            print('SUCCESS: Business Identification Document is uploaded')\n        except:\n            print(\"FAILED: Business Identification Document could not be uploaded\")\n            raise Exception\n    \n        try:\n            addressToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"address\"]')))\n            addressToBeEntered.click()\n            clearTextField()\n            addressToBeEntered.send_keys('3825 Edwards Rd, #103, Cincinnati, OH 45209')\n            print('SUCCESS: Address is entered')\n        except:\n            print(\"FAILED: Address could not be entered\")\n            raise Exception\n    \n        try:\n            stateToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"stateName\"]')))\n            stateToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//select[@name=\"stateName\"]//option[@value=\"Ohio\"]'):\n                if option.text == 'Ohio':\n                    option.click()\n                    break\n            print(\"SUCCESS: State 'Ohio' is selected from dropdown\")\n        except:\n            print(\"FAILED: State 'Ohio' could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            cityToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"city\"]')))\n            cityToBeEntered.click()\n            clearTextField()\n            cityToBeEntered.send_keys('Cincinnati')\n            print('SUCCESS: City is entered')\n        except:\n            print(\"FAILED: City could not be entered\")\n            raise Exception\n    \n        try:\n            zipCodeToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"zipCode\"]')))\n            zipCodeToBeEntered.click()\n            clearTextField()\n            zipCodeToBeEntered.send_keys('45209')\n            print('SUCCESS: Zip code is entered')\n        except:\n            print(\"FAILED: Zip code could not be entered\")\n            raise Exception\n    \n        try:\n            titleToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"title\"]')))\n            titleToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//select[@name=\"title\"]//option[@value=\"CTO\"]'):\n                if option.text == 'CTO':\n                    option.click()\n                    break\n            print(\"SUCCESS: Title 'CTO' is selected from dropdown\")\n        except:\n            print(\"FAILED: Title 'CTO' could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            fnameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"firstName\"]')))\n            fnameToBeEntered.click()\n            clearTextField()\n            fnameToBeEntered.send_keys(fnameRep)\n            print('SUCCESS: First name is entered')\n        except:\n            print(\"FAILED: First name could not be entered\")\n            raise Exception\n    \n        try:\n            lnameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"lastName\"]')))\n            lnameToBeEntered.click()\n            clearTextField()\n            lnameToBeEntered.send_keys(lnameRep)\n            print('SUCCESS: Last name is entered')\n        except:\n            print(\"FAILED: Last name could not be entered\")\n            raise Exception\n    \n        try:\n            emailToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"email\"]')))\n            emailToBeEntered.click()\n            clearTextField()\n            emailToBeEntered.send_keys(emailRep)\n            print('SUCCESS: Email is entered')\n        except:\n            print(\"FAILED: Email could not be entered\")\n            raise Exception\n    \n        try:\n            addressToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"address1\"]')))\n            addressToBeEntered.click()\n            clearTextField()\n            addressToBeEntered.send_keys(emailRep)\n            print('SUCCESS: Address is entered')\n        except:\n            print(\"FAILED: Address could not be entered\")\n            raise Exception\n    \n        try:\n            RepPersonalIDToBeUploaded=self.driver.find_element(By.XPATH, '//div[3]/input[@type=\"file\"]')\n            pngfilepath = os.path.abspath(\"blank.png\")\n            RepPersonalIDToBeUploaded.send_keys(pngfilepath)\n            # RepPersonalIDToBeUploaded.send_keys(\"/Users/qualityassurance/Desktop/automation-scripts/AVAXDEV_SHAHWAR/blank.png\")\n            print('SUCCESS: Representative Personal Identification is uploaded')\n        except:\n            print(\"FAILED: Representative Personal Identification could not be uploaded\")\n            raise Exception\n    \n        try:\n            CityOfRepToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"city2\"]')))\n            CityOfRepToBeEntered.click()\n            clearTextField()\n            CityOfRepToBeEntered.send_keys('Cincinnati')\n            print('SUCCESS: City of Representative is entered')\n        except:\n            print(\"FAILED: City of Representative could not be entered\")\n            raise Exception\n    \n        try:\n            StateofRepToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"stateName2\"]')))\n            StateofRepToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH,'//select[@name=\"stateName2\"]//option[@value=\"Ohio\"]'):\n                if option.text == 'Ohio':\n                    option.click()\n                    break\n            print('SUCCESS: State of Representative selected from dropdown')\n        except:\n            print(\"FAILED: State of Representative could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            zipCodeofRepToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"postalCode\"]')))\n            zipCodeofRepToBeEntered.click()\n            clearTextField()\n            zipCodeofRepToBeEntered.send_keys('45209')\n            print('SUCCESS: Zip code is entered')\n        except:\n            print(\"FAILED: Zip code could not be entered\")\n            raise Exception\n    \n        try:\n            SSNToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@type=\"password\"]')))\n            SSNToBeEntered.send_keys('123456789')\n            print('SUCCESS: SSN is entered')\n        except:\n            print(\"FAILED: SSN could not be entered\")\n            raise Exception\n    \n        try:\n            verfiybuttonToSendOTP=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[text()=\"verify\"]')))\n            verfiybuttonToSendOTP.click()\n            print('SUCCESS: Verify button is clicked to verify phone number')\n        except:\n            print(\"FAILED: Verify button could not be clicked to verify phone number\")\n            raise Exception\n    \n        time.sleep(10)\n        self.driver.execute_script(\"window.open('');\")\n        self.driver.switch_to.window(self.driver.window_handles[1])\n        self.driver.get('https://avaxdevapi.akru.co/api/user/showOtp/'+email)\n        otp = wait.until(EC.element_to_be_clickable((By.XPATH, '/html/body/pre')))\n        otp_array = list(otp.text)\n        otp_code = otp_array[39] + otp_array[40] + \\\n            otp_array[41] + otp_array[42]\n    \n        self.driver.close()\n        self.driver.switch_to.window(self.driver.window_handles[0])\n    \n        try:\n            otptobeentered = wait.until(EC.element_to_be_clickable((By.XPATH, '//input[@name=\"otp\"]')))\n            otptobeentered.send_keys(otp_code)\n            print('SUCCESS: OTP is entered')\n        except:\n            print(\"FAILED: Could not enter OTP\")\n            raise Exception\n    \n        try:\n            dobToBeEntered=wait.until(EC.element_to_be_clickable((By.ID,'date-picker-dialog')))\n            dobToBeEntered.send_keys(Keys.BACKSPACE)\n            dobToBeEntered.send_keys('25/07/2001')\n            print('SUCCESS: Date of Birth is entered')\n        except:\n            print(\"FAILED: Could not enter date of birth\")\n            raise Exception\n    \n        try:\n            time.sleep(10)\n            continueButtonAfterStep2Completion=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[@class=\"primary-btn mr-1\"]')))\n            continueButtonAfterStep2Completion.click()\n            print('SUCCESS: Continue button is clicked after filling the form on step 2')\n        except:\n            print(\"FAILED: Continue button could not be clicked after filling the form on step 2\")\n            raise Exception\n    \n    \n    \n        try:\n>           stateToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//div[@id=\"investor-purpose\"]')))\n\nEntity_Signup.py:496: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"617724715472c5624a3fbfb316651254\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x10716ec20>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       0   chromedriver                        0x000000010b219ef9 chromedriver + 4480761\nE       1   chromedriver                        0x000000010b1a55d3 chromedriver + 4003283\nE       2   chromedriver                        0x000000010ae38338 chromedriver + 410424\nE       3   chromedriver                        0x000000010ae6e5bd chromedriver + 632253\nE       4   chromedriver                        0x000000010ae6e841 chromedriver + 632897\nE       5   chromedriver                        0x000000010aea07d4 chromedriver + 837588\nE       6   chromedriver                        0x000000010ae8ba8d chromedriver + 752269\nE       7   chromedriver                        0x000000010ae9e4f1 chromedriver + 828657\nE       8   chromedriver                        0x000000010ae8b953 chromedriver + 751955\nE       9   chromedriver                        0x000000010ae61cd5 chromedriver + 580821\nE       10  chromedriver                        0x000000010ae62d25 chromedriver + 584997\nE       11  chromedriver                        0x000000010b1eb02d chromedriver + 4288557\nE       12  chromedriver                        0x000000010b1f01b3 chromedriver + 4309427\nE       13  chromedriver                        0x000000010b1f523f chromedriver + 4330047\nE       14  chromedriver                        0x000000010b1f0dfa chromedriver + 4312570\nE       15  chromedriver                        0x000000010b1c9fef chromedriver + 4153327\nE       16  chromedriver                        0x000000010b20ad78 chromedriver + 4418936\nE       17  chromedriver                        0x000000010b20aeff chromedriver + 4419327\nE       18  chromedriver                        0x000000010b221ab5 chromedriver + 4512437\nE       19  libsystem_pthread.dylib             0x00007fff72470109 _pthread_start + 148\nE       20  libsystem_pthread.dylib             0x00007fff7246bb8b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:90: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Entity_Signup.PythonOrgSearch testMethod=test_search_in_python_org>\n\n    def test_search_in_python_org(self):\n        self.driver.maximize_window()\n        url = \"https://avaxdev.akru.co\"\n        fname = names.get_first_name()\n        lname = names.get_last_name()\n        email = fname + lname + '123@yopmail.com'\n        phone_no = '5678956789'\n        fnameRep = names.get_first_name()\n        lnameRep = names.get_last_name()\n        emailRep = fnameRep+lnameRep+'123@yopmail.com'\n    \n        action = ActionChains (self.driver)\n        def clearTextField():\n            action.key_down(Keys.COMMAND).perform()\n            action.send_keys('a').perform()\n            action.key_up(Keys.COMMAND).perform()\n            action.send_keys(Keys.BACK_SPACE).perform()\n    \n    \n        self.driver.get(url)\n        print('SUCCESS: \"'+url+'\" saved in webdriver')\n        wait = WebDriverWait(self.driver, 50)\n    \n        time.sleep(3)\n        try:\n            loginButton=wait.until(EC.element_to_be_clickable((By.ID,\"navbar-header-sticky-starter\")))\n            loginButton.click()\n            print('SUCCESS: Get Started button clicked')\n        except:\n            print(\"FAILED: Get Started button could not be clicked\")\n            raise Exception\n    \n        try:\n            yesAccreditedInvestor=wait.until(EC.visibility_of_element_located((By.CLASS_NAME,'check-label')))\n            yesAccreditedInvestor.click()\n            print('SUCCESS: Yes selected for \"Are you an accredited investor?\"')\n        except:\n            print('FAILED: Yes could not be selected for \"Are you an accredited investor?\"')\n            raise Exception\n    \n        try:\n            continueAccreditedInvestor=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[@class=\"primary-btn\"][text()=\"Continue\"]')))\n            continueAccreditedInvestor.click()\n            print('SUCCESS: Continue button clicked for \"Are you an accredited investor?\"')\n        except:\n            print('FAILED: Continue button could not be clicked for \"Are you an accredited investor?\"')\n            raise Exception\n    \n        try:\n            starterPackageSelect=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[text()=\"Select this plan\"]')))\n            starterPackageSelect.click()\n            print('SUCCESS: Select this plan button is clicked for starter packages')\n        except:\n            print(\"FAILED: Select this plan button could not be clicked for starter packages\")\n            raise Exception\n    \n        try:\n            investmentPlanSelect=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[text()=\"Select this plan\"]')))\n            investmentPlanSelect.click()\n            print('SUCCESS: Select this plan button is clicked for investment plans')\n        except:\n            print(\"FAILED: Select this plan button could not be clicked for investment plans\")\n            raise Exception\n    \n        try:\n            fnameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"firstName\"]')))\n            fnameToBeEntered.send_keys(fname)\n            print('SUCCESS: First name is entered')\n        except:\n            print(\"FAILED: First name could not be entered\")\n            raise Exception\n    \n        try:\n            lnameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"lastName\"]')))\n            lnameToBeEntered.send_keys(lname)\n            print('SUCCESS: Last name is entered')\n        except:\n            print(\"FAILED: Last name could not be entered\")\n            raise Exception\n    \n    \n        try:\n            emailToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"email\"]')))\n            emailToBeEntered.send_keys(email)\n            print('SUCCESS: Email is entered')\n        except:\n            print(\"FAILED: Email could not be entered\")\n            raise Exception\n    \n        try:\n            phnoToBeEntered=wait.until(EC.element_to_be_clickable((By.ID,'signup-phone')))\n            phnoToBeEntered.click()\n            clearTextField()\n            phnoToBeEntered.send_keys(phone_no)\n            print('SUCCESS: Phone number is entered')\n        except:\n            print(\"FAILED: Phone number could not be entered\")\n            raise Exception\n    \n        try:\n            agreeTermsAndPrivacy=wait.until(EC.visibility_of_element_located((By.CLASS_NAME,'check-label')))\n            agreeTermsAndPrivacy.click()\n            print(\"SUCCESS: To agree to AKRU's terms and privacy policy Checkbox clicked\")\n        except:\n            print(\"FAILED: To agree to AKRU's terms and privacy policy Checkbox could not be clicked\")\n            raise Exception\n    \n        try:\n            selectingEntityRadioButton=wait.until(EC.visibility_of_element_located((By.XPATH,'//span[text()=\"Entity\"]')))\n            selectingEntityRadioButton.click()\n            print('SUCCESS: Entity Radio Button is clicked')\n        except:\n            print(\"FAILED: Entity Radio Button could not be clicked\")\n            raise Exception\n    \n        try:\n            agreeAndContinueToSendSignupEmail=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[@class=\"primary-btn mr-1 \"]')))\n            agreeAndContinueToSendSignupEmail.click()\n            print('SUCCESS: Agree & Continue button clicked')\n        except:\n            print(\"FAILED: Could not click Agree & Continue button\")\n            raise Exception\n    \n        try:\n            modalWhenEmailisSent=wait.until(EC.visibility_of_element_located((By.XPATH,'//h5[@class=\"title\"]')))\n            print(\"SUCCESS: 'Verify Your Email' modal appeared\")\n        except:\n            print(\"FAILED: 'Verify Your Email' modal could not be appeared\")\n            raise Exception\n    \n        def emailLogin():\n            self.driver.execute_script(\"window.open('http://www.yopmail.com', 'new window')\")\n            self.driver.switch_to.window(self.driver.window_handles[1])\n            print('SUCCESS: Switched to YOPMAIL tab')\n    \n            try:\n                time.sleep(3)\n                search = wait.until(EC.element_to_be_clickable((By.ID,\"login\")))\n                search.clear()\n                search.send_keys(email)\n                search.send_keys(Keys.RETURN)\n                print('SUCCESS: Email entered in YOPMAIL input field')\n            except:\n                print('FAILED: Email could not be entered in YOPMAIL input field')\n                raise Exception\n    \n            time.sleep(3)\n            self.driver.refresh()\n            time.sleep(5)\n    \n            try:\n                self.driver.switch_to.frame('ifmail')\n            except:\n                print(\"FAILED: Could not switch to iframe in YOPMAIL.\")\n                raise Exception\n    \n            try:\n                time.sleep(3)\n                LoginEmailButton=wait.until(EC.element_to_be_clickable((By.XPATH,'//b[text()=\"Verify Email\"]')))\n                LoginEmailButton.click()\n                print('SUCCESS: \"Verfy Email\" button clicked from YOPMAIL')\n            except:\n                print('FAILED: Could not click \"Verify Email\" button. Possibly due to captcha.')\n                raise Exception\n    \n        emailLogin()\n    \n        time.sleep(10)\n        self.driver.switch_to.window(self.driver.window_handles[0])\n        self.driver.close()\n        self.driver.switch_to.window(self.driver.window_handles[0])\n        self.driver.close()\n        self.driver.switch_to.window(self.driver.window_handles[0])\n        time.sleep(1)\n    \n        try:\n            EntityNameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"name\"]')))\n            EntityNameToBeEntered.send_keys(fname+\"'s Entity\")\n            print('SUCCESS: Enity Name is entered')\n        except:\n            print(\"FAILED: Entity name could not be entered\")\n            raise Exception\n    \n        try:\n            entityTypeToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"subType\"]')))\n            entityTypeToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//select[@name=\"subType\"]//option[@value=\"C Corporation\"]'):\n                if option.text == 'C Corporation':\n                    option.click()\n                    break\n            print('SUCCESS: Entity type is selected from dropdown')\n        except:\n            print(\"FAILED: Entity Type could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            TaxClassificationToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"classification\"]')))\n            TaxClassificationToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//select[@name=\"classification\"]//option[@value=\"C Corporation\"]'):\n                if option.text == 'C Corporation':\n                    option.click()\n                    break\n            print('SUCCESS: Tax Classification selected from dropdown')\n        except:\n            print(\"FAILED: Tax Classification could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            IndustryToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"industry\"]')))\n            IndustryToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//select[@name=\"industry\"]//option[@value=\"Gourmet foods\"]'):\n                if option.text == 'Gourmet foods':\n                    option.click()\n                    break\n            print('SUCCESS: Industry selected from dropdown')\n        except:\n            print(\"FAILED: Industry could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            StateToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"juristdiction\"]')))\n            StateToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH,'//select[@name=\"juristdiction\"]//option[@value=\"Ohio\"]'):\n                if option.text == 'Ohio':\n                    option.click()\n                    break\n            print('SUCCESS: State selected from dropdown')\n        except:\n            print(\"FAILED: State could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            EINToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"einNumber\"]')))\n            EINToBeEntered.send_keys('123456789')\n            print('SUCCESS: EIN Number is entered')\n        except:\n            print(\"FAILED: EIN number could not be entered\")\n            raise Exception\n    \n        try:\n            CertificateOfFormationToBeUploaded=self.driver.find_element(By.XPATH, '//div[1]/input[@type=\"file\"]')\n            filepath = os.path.abspath(\"blank.pdf\")\n            CertificateOfFormationToBeUploaded.send_keys(filepath)\n            # CertificateOfFormationToBeUploaded.send_keys(\"/Users/qualityassurance/Desktop/automation-scripts/AVAXDEV_SHAHWAR/blank.pdf\")\n            print('SUCCESS: Certificate of Formation is uploaded')\n        except:\n            print(\"FAILED: Certificate of Formation could not be uploaded\")\n            raise Exception\n    \n        try:\n            OperatingAgreementToBeUploaded=self.driver.find_element(By.XPATH, '//div[2]/input[@type=\"file\"]')\n            OperatingAgreementToBeUploaded.send_keys(filepath)\n            # OperatingAgreementToBeUploaded.send_keys(\"/Users/qualityassurance/Desktop/automation-scripts/AVAXDEV_SHAHWAR/blank.pdf\")\n            print('SUCCESS: Operating Agreement is uploaded')\n        except:\n            print(\"FAILED: Operating Agreement could not be uploaded\")\n            raise Exception\n    \n        try:\n            BusinessIddocToBeUploaded=self.driver.find_element(By.XPATH, '//div[4]/input[@type=\"file\"]')\n            BusinessIddocToBeUploaded.send_keys(filepath)\n            # BusinessIddocToBeUploaded.send_keys(\"/Users/qualityassurance/Desktop/automation-scripts/AVAXDEV_SHAHWAR/blank.pdf\")\n            print('SUCCESS: Business Identification Document is uploaded')\n        except:\n            print(\"FAILED: Business Identification Document could not be uploaded\")\n            raise Exception\n    \n        try:\n            addressToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"address\"]')))\n            addressToBeEntered.click()\n            clearTextField()\n            addressToBeEntered.send_keys('3825 Edwards Rd, #103, Cincinnati, OH 45209')\n            print('SUCCESS: Address is entered')\n        except:\n            print(\"FAILED: Address could not be entered\")\n            raise Exception\n    \n        try:\n            stateToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"stateName\"]')))\n            stateToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//select[@name=\"stateName\"]//option[@value=\"Ohio\"]'):\n                if option.text == 'Ohio':\n                    option.click()\n                    break\n            print(\"SUCCESS: State 'Ohio' is selected from dropdown\")\n        except:\n            print(\"FAILED: State 'Ohio' could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            cityToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"city\"]')))\n            cityToBeEntered.click()\n            clearTextField()\n            cityToBeEntered.send_keys('Cincinnati')\n            print('SUCCESS: City is entered')\n        except:\n            print(\"FAILED: City could not be entered\")\n            raise Exception\n    \n        try:\n            zipCodeToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"zipCode\"]')))\n            zipCodeToBeEntered.click()\n            clearTextField()\n            zipCodeToBeEntered.send_keys('45209')\n            print('SUCCESS: Zip code is entered')\n        except:\n            print(\"FAILED: Zip code could not be entered\")\n            raise Exception\n    \n        try:\n            titleToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"title\"]')))\n            titleToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//select[@name=\"title\"]//option[@value=\"CTO\"]'):\n                if option.text == 'CTO':\n                    option.click()\n                    break\n            print(\"SUCCESS: Title 'CTO' is selected from dropdown\")\n        except:\n            print(\"FAILED: Title 'CTO' could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            fnameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"firstName\"]')))\n            fnameToBeEntered.click()\n            clearTextField()\n            fnameToBeEntered.send_keys(fnameRep)\n            print('SUCCESS: First name is entered')\n        except:\n            print(\"FAILED: First name could not be entered\")\n            raise Exception\n    \n        try:\n            lnameToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"lastName\"]')))\n            lnameToBeEntered.click()\n            clearTextField()\n            lnameToBeEntered.send_keys(lnameRep)\n            print('SUCCESS: Last name is entered')\n        except:\n            print(\"FAILED: Last name could not be entered\")\n            raise Exception\n    \n        try:\n            emailToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"email\"]')))\n            emailToBeEntered.click()\n            clearTextField()\n            emailToBeEntered.send_keys(emailRep)\n            print('SUCCESS: Email is entered')\n        except:\n            print(\"FAILED: Email could not be entered\")\n            raise Exception\n    \n        try:\n            addressToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name = \"address1\"]')))\n            addressToBeEntered.click()\n            clearTextField()\n            addressToBeEntered.send_keys(emailRep)\n            print('SUCCESS: Address is entered')\n        except:\n            print(\"FAILED: Address could not be entered\")\n            raise Exception\n    \n        try:\n            RepPersonalIDToBeUploaded=self.driver.find_element(By.XPATH, '//div[3]/input[@type=\"file\"]')\n            pngfilepath = os.path.abspath(\"blank.png\")\n            RepPersonalIDToBeUploaded.send_keys(pngfilepath)\n            # RepPersonalIDToBeUploaded.send_keys(\"/Users/qualityassurance/Desktop/automation-scripts/AVAXDEV_SHAHWAR/blank.png\")\n            print('SUCCESS: Representative Personal Identification is uploaded')\n        except:\n            print(\"FAILED: Representative Personal Identification could not be uploaded\")\n            raise Exception\n    \n        try:\n            CityOfRepToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"city2\"]')))\n            CityOfRepToBeEntered.click()\n            clearTextField()\n            CityOfRepToBeEntered.send_keys('Cincinnati')\n            print('SUCCESS: City of Representative is entered')\n        except:\n            print(\"FAILED: City of Representative could not be entered\")\n            raise Exception\n    \n        try:\n            StateofRepToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//select[@name=\"stateName2\"]')))\n            StateofRepToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH,'//select[@name=\"stateName2\"]//option[@value=\"Ohio\"]'):\n                if option.text == 'Ohio':\n                    option.click()\n                    break\n            print('SUCCESS: State of Representative selected from dropdown')\n        except:\n            print(\"FAILED: State of Representative could not be selected from dropdown\")\n            raise Exception\n    \n        try:\n            zipCodeofRepToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@name=\"postalCode\"]')))\n            zipCodeofRepToBeEntered.click()\n            clearTextField()\n            zipCodeofRepToBeEntered.send_keys('45209')\n            print('SUCCESS: Zip code is entered')\n        except:\n            print(\"FAILED: Zip code could not be entered\")\n            raise Exception\n    \n        try:\n            SSNToBeEntered=wait.until(EC.element_to_be_clickable((By.XPATH,'//input[@type=\"password\"]')))\n            SSNToBeEntered.send_keys('123456789')\n            print('SUCCESS: SSN is entered')\n        except:\n            print(\"FAILED: SSN could not be entered\")\n            raise Exception\n    \n        try:\n            verfiybuttonToSendOTP=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[text()=\"verify\"]')))\n            verfiybuttonToSendOTP.click()\n            print('SUCCESS: Verify button is clicked to verify phone number')\n        except:\n            print(\"FAILED: Verify button could not be clicked to verify phone number\")\n            raise Exception\n    \n        time.sleep(10)\n        self.driver.execute_script(\"window.open('');\")\n        self.driver.switch_to.window(self.driver.window_handles[1])\n        self.driver.get('https://avaxdevapi.akru.co/api/user/showOtp/'+email)\n        otp = wait.until(EC.element_to_be_clickable((By.XPATH, '/html/body/pre')))\n        otp_array = list(otp.text)\n        otp_code = otp_array[39] + otp_array[40] + \\\n            otp_array[41] + otp_array[42]\n    \n        self.driver.close()\n        self.driver.switch_to.window(self.driver.window_handles[0])\n    \n        try:\n            otptobeentered = wait.until(EC.element_to_be_clickable((By.XPATH, '//input[@name=\"otp\"]')))\n            otptobeentered.send_keys(otp_code)\n            print('SUCCESS: OTP is entered')\n        except:\n            print(\"FAILED: Could not enter OTP\")\n            raise Exception\n    \n        try:\n            dobToBeEntered=wait.until(EC.element_to_be_clickable((By.ID,'date-picker-dialog')))\n            dobToBeEntered.send_keys(Keys.BACKSPACE)\n            dobToBeEntered.send_keys('25/07/2001')\n            print('SUCCESS: Date of Birth is entered')\n        except:\n            print(\"FAILED: Could not enter date of birth\")\n            raise Exception\n    \n        try:\n            time.sleep(10)\n            continueButtonAfterStep2Completion=wait.until(EC.element_to_be_clickable((By.XPATH,'//button[@class=\"primary-btn mr-1\"]')))\n            continueButtonAfterStep2Completion.click()\n            print('SUCCESS: Continue button is clicked after filling the form on step 2')\n        except:\n            print(\"FAILED: Continue button could not be clicked after filling the form on step 2\")\n            raise Exception\n    \n    \n    \n        try:\n            stateToBeSelected=wait.until(EC.element_to_be_clickable((By.XPATH,'//div[@id=\"investor-purpose\"]')))\n            stateToBeSelected.click()\n            for option in self.driver.find_elements(By.XPATH, '//li[@data-value=\"capitalAppreciation\"]'):\n                #if option.text == 'Ohio'\n                if True:\n                    option.click()\n                    break\n            print(\"SUCCESS: investor purpose , Capital Appreciation Supported is selected\")\n        except:\n            print(\"FAILED: investor purpose , Capital Appreciation Supported is not selected\")\n>           raise Exception\nE           Exception\n\nEntity_Signup.py:506: Exception"}, "attachments": [{"name": "screenshot", "source": "abe2e0e9-9539-430e-9ff5-f846ad053cfb-attachment.png", "type": "image/png"}, {"name": "log", "source": "eb14ad06-7c36-4a82-97fc-85bf1b46f388-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "5aca37a2-94d5-46b6-9db3-db1190513dd9-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "63f57d4e-e7de-4976-b69c-0adcaece2ed2-attachment.txt", "type": "text/plain"}], "start": 1658811009994, "stop": 1658811177022, "uuid": "5274adce-47f3-4c22-b053-b0357c721644", "historyId": "da4360cbb6f88c33ff41325392c32141", "testCaseId": "de2d653b208a5463f7130ad8ada1fa61", "fullName": "Entity_Signup.PythonOrgSearch#test_search_in_python_org", "labels": [{"name": "suite", "value": "Entity_Signup"}, {"name": "subSuite", "value": "PythonOrgSearch"}, {"name": "host", "value": "Asads-MacBook-Pro.local"}, {"name": "thread", "value": "83375-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Entity_Signup"}]}